"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-logging-utils";
exports.ids = ["vendor-chunks/google-logging-utils"];
exports.modules = {

/***/ "(action-browser)/./node_modules/google-logging-utils/build/src/colours.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/colours.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Colours = void 0;\n/**\n * Handles figuring out if we can use ANSI colours and handing out the escape codes.\n *\n * This is for package-internal use only, and may change at any time.\n *\n * @private\n * @internal\n */ class Colours {\n    /**\n     * @param stream The stream (e.g. process.stderr)\n     * @returns true if the stream should have colourization enabled\n     */ static isEnabled(stream) {\n        return stream.isTTY && (typeof stream.getColorDepth === \"function\" ? stream.getColorDepth() > 2 : true);\n    }\n    static refresh() {\n        Colours.enabled = Colours.isEnabled(process.stderr);\n        if (!this.enabled) {\n            Colours.reset = \"\";\n            Colours.bright = \"\";\n            Colours.dim = \"\";\n            Colours.red = \"\";\n            Colours.green = \"\";\n            Colours.yellow = \"\";\n            Colours.blue = \"\";\n            Colours.magenta = \"\";\n            Colours.cyan = \"\";\n            Colours.white = \"\";\n            Colours.grey = \"\";\n        } else {\n            Colours.reset = \"\\x1b[0m\";\n            Colours.bright = \"\\x1b[1m\";\n            Colours.dim = \"\\x1b[2m\";\n            Colours.red = \"\\x1b[31m\";\n            Colours.green = \"\\x1b[32m\";\n            Colours.yellow = \"\\x1b[33m\";\n            Colours.blue = \"\\x1b[34m\";\n            Colours.magenta = \"\\x1b[35m\";\n            Colours.cyan = \"\\x1b[36m\";\n            Colours.white = \"\\x1b[37m\";\n            Colours.grey = \"\\x1b[90m\";\n        }\n    }\n}\nexports.Colours = Colours;\nColours.enabled = false;\nColours.reset = \"\";\nColours.bright = \"\";\nColours.dim = \"\";\nColours.red = \"\";\nColours.green = \"\";\nColours.yellow = \"\";\nColours.blue = \"\";\nColours.magenta = \"\";\nColours.cyan = \"\";\nColours.white = \"\";\nColours.grey = \"\";\nColours.refresh(); //# sourceMappingURL=colours.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvY29sb3Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCOzs7Ozs7O0NBT0MsR0FDRCxNQUFNRTtJQUNGOzs7S0FHQyxHQUNELE9BQU9DLFVBQVVDLE1BQU0sRUFBRTtRQUNyQixPQUFRQSxPQUFPQyxLQUFLLElBQ2YsUUFBT0QsT0FBT0UsYUFBYSxLQUFLLGFBQzNCRixPQUFPRSxhQUFhLEtBQUssSUFDekIsSUFBRztJQUNqQjtJQUNBLE9BQU9DLFVBQVU7UUFDYkwsUUFBUU0sT0FBTyxHQUFHTixRQUFRQyxTQUFTLENBQUNNLFFBQVFDLE1BQU07UUFDbEQsSUFBSSxDQUFDLElBQUksQ0FBQ0YsT0FBTyxFQUFFO1lBQ2ZOLFFBQVFTLEtBQUssR0FBRztZQUNoQlQsUUFBUVUsTUFBTSxHQUFHO1lBQ2pCVixRQUFRVyxHQUFHLEdBQUc7WUFDZFgsUUFBUVksR0FBRyxHQUFHO1lBQ2RaLFFBQVFhLEtBQUssR0FBRztZQUNoQmIsUUFBUWMsTUFBTSxHQUFHO1lBQ2pCZCxRQUFRZSxJQUFJLEdBQUc7WUFDZmYsUUFBUWdCLE9BQU8sR0FBRztZQUNsQmhCLFFBQVFpQixJQUFJLEdBQUc7WUFDZmpCLFFBQVFrQixLQUFLLEdBQUc7WUFDaEJsQixRQUFRbUIsSUFBSSxHQUFHO1FBQ25CLE9BQ0s7WUFDRG5CLFFBQVFTLEtBQUssR0FBRztZQUNoQlQsUUFBUVUsTUFBTSxHQUFHO1lBQ2pCVixRQUFRVyxHQUFHLEdBQUc7WUFDZFgsUUFBUVksR0FBRyxHQUFHO1lBQ2RaLFFBQVFhLEtBQUssR0FBRztZQUNoQmIsUUFBUWMsTUFBTSxHQUFHO1lBQ2pCZCxRQUFRZSxJQUFJLEdBQUc7WUFDZmYsUUFBUWdCLE9BQU8sR0FBRztZQUNsQmhCLFFBQVFpQixJQUFJLEdBQUc7WUFDZmpCLFFBQVFrQixLQUFLLEdBQUc7WUFDaEJsQixRQUFRbUIsSUFBSSxHQUFHO1FBQ25CO0lBQ0o7QUFDSjtBQUNBckIsZUFBZSxHQUFHRTtBQUNsQkEsUUFBUU0sT0FBTyxHQUFHO0FBQ2xCTixRQUFRUyxLQUFLLEdBQUc7QUFDaEJULFFBQVFVLE1BQU0sR0FBRztBQUNqQlYsUUFBUVcsR0FBRyxHQUFHO0FBQ2RYLFFBQVFZLEdBQUcsR0FBRztBQUNkWixRQUFRYSxLQUFLLEdBQUc7QUFDaEJiLFFBQVFjLE1BQU0sR0FBRztBQUNqQmQsUUFBUWUsSUFBSSxHQUFHO0FBQ2ZmLFFBQVFnQixPQUFPLEdBQUc7QUFDbEJoQixRQUFRaUIsSUFBSSxHQUFHO0FBQ2ZqQixRQUFRa0IsS0FBSyxHQUFHO0FBQ2hCbEIsUUFBUW1CLElBQUksR0FBRztBQUNmbkIsUUFBUUssT0FBTyxJQUNmLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWxvZ2dpbmctdXRpbHMvYnVpbGQvc3JjL2NvbG91cnMuanM/ZGM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvdXJzID0gdm9pZCAwO1xuLyoqXG4gKiBIYW5kbGVzIGZpZ3VyaW5nIG91dCBpZiB3ZSBjYW4gdXNlIEFOU0kgY29sb3VycyBhbmQgaGFuZGluZyBvdXQgdGhlIGVzY2FwZSBjb2Rlcy5cbiAqXG4gKiBUaGlzIGlzIGZvciBwYWNrYWdlLWludGVybmFsIHVzZSBvbmx5LCBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIENvbG91cnMge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBzdHJlYW0gVGhlIHN0cmVhbSAoZS5nLiBwcm9jZXNzLnN0ZGVycilcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJlYW0gc2hvdWxkIGhhdmUgY29sb3VyaXphdGlvbiBlbmFibGVkXG4gICAgICovXG4gICAgc3RhdGljIGlzRW5hYmxlZChzdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIChzdHJlYW0uaXNUVFkgJiZcbiAgICAgICAgICAgICh0eXBlb2Ygc3RyZWFtLmdldENvbG9yRGVwdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IHN0cmVhbS5nZXRDb2xvckRlcHRoKCkgPiAyXG4gICAgICAgICAgICAgICAgOiB0cnVlKSk7XG4gICAgfVxuICAgIHN0YXRpYyByZWZyZXNoKCkge1xuICAgICAgICBDb2xvdXJzLmVuYWJsZWQgPSBDb2xvdXJzLmlzRW5hYmxlZChwcm9jZXNzLnN0ZGVycik7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICBDb2xvdXJzLnJlc2V0ID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLmJyaWdodCA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy5kaW0gPSAnJztcbiAgICAgICAgICAgIENvbG91cnMucmVkID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLmdyZWVuID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLnllbGxvdyA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy5ibHVlID0gJyc7XG4gICAgICAgICAgICBDb2xvdXJzLm1hZ2VudGEgPSAnJztcbiAgICAgICAgICAgIENvbG91cnMuY3lhbiA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy53aGl0ZSA9ICcnO1xuICAgICAgICAgICAgQ29sb3Vycy5ncmV5ID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBDb2xvdXJzLnJlc2V0ID0gJ1xcdTAwMWJbMG0nO1xuICAgICAgICAgICAgQ29sb3Vycy5icmlnaHQgPSAnXFx1MDAxYlsxbSc7XG4gICAgICAgICAgICBDb2xvdXJzLmRpbSA9ICdcXHUwMDFiWzJtJztcbiAgICAgICAgICAgIENvbG91cnMucmVkID0gJ1xcdTAwMWJbMzFtJztcbiAgICAgICAgICAgIENvbG91cnMuZ3JlZW4gPSAnXFx1MDAxYlszMm0nO1xuICAgICAgICAgICAgQ29sb3Vycy55ZWxsb3cgPSAnXFx1MDAxYlszM20nO1xuICAgICAgICAgICAgQ29sb3Vycy5ibHVlID0gJ1xcdTAwMWJbMzRtJztcbiAgICAgICAgICAgIENvbG91cnMubWFnZW50YSA9ICdcXHUwMDFiWzM1bSc7XG4gICAgICAgICAgICBDb2xvdXJzLmN5YW4gPSAnXFx1MDAxYlszNm0nO1xuICAgICAgICAgICAgQ29sb3Vycy53aGl0ZSA9ICdcXHUwMDFiWzM3bSc7XG4gICAgICAgICAgICBDb2xvdXJzLmdyZXkgPSAnXFx1MDAxYls5MG0nO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Db2xvdXJzID0gQ29sb3VycztcbkNvbG91cnMuZW5hYmxlZCA9IGZhbHNlO1xuQ29sb3Vycy5yZXNldCA9ICcnO1xuQ29sb3Vycy5icmlnaHQgPSAnJztcbkNvbG91cnMuZGltID0gJyc7XG5Db2xvdXJzLnJlZCA9ICcnO1xuQ29sb3Vycy5ncmVlbiA9ICcnO1xuQ29sb3Vycy55ZWxsb3cgPSAnJztcbkNvbG91cnMuYmx1ZSA9ICcnO1xuQ29sb3Vycy5tYWdlbnRhID0gJyc7XG5Db2xvdXJzLmN5YW4gPSAnJztcbkNvbG91cnMud2hpdGUgPSAnJztcbkNvbG91cnMuZ3JleSA9ICcnO1xuQ29sb3Vycy5yZWZyZXNoKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvdXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNvbG91cnMiLCJpc0VuYWJsZWQiLCJzdHJlYW0iLCJpc1RUWSIsImdldENvbG9yRGVwdGgiLCJyZWZyZXNoIiwiZW5hYmxlZCIsInByb2Nlc3MiLCJzdGRlcnIiLCJyZXNldCIsImJyaWdodCIsImRpbSIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJncmV5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-logging-utils/build/src/colours.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-logging-utils/build/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n__exportStar(__webpack_require__(/*! ./logging-utils */ \"(action-browser)/./node_modules/google-logging-utils/build/src/logging-utils.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakMsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcsZUFBZSxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFlBQVksSUFBSyxTQUFTWixDQUFDLEVBQUVhLFFBQU87SUFDakUsSUFBSyxJQUFJQyxLQUFLZCxFQUFHLElBQUljLE1BQU0sYUFBYSxDQUFDakIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLFVBQVNDLElBQUlsQixnQkFBZ0JpQixVQUFTYixHQUFHYztBQUMzSDtBQUNBakIsOENBQTZDO0lBQUVxQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETixhQUFhTyxtQkFBT0EsQ0FBQyx3R0FBaUIsR0FBR04sVUFDekMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvaW5kZXguanM/NGRjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbG9nZ2luZy11dGlsc1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-logging-utils/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/google-logging-utils/build/src/logging-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/logging-utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021-2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.env = exports.DebugLogBackendBase = exports.placeholder = exports.AdhocDebugLogger = exports.LogSeverity = void 0;\nexports.getNodeBackend = getNodeBackend;\nexports.getDebugBackend = getDebugBackend;\nexports.getStructuredBackend = getStructuredBackend;\nexports.setBackend = setBackend;\nexports.log = log;\nconst node_events_1 = __webpack_require__(/*! node:events */ \"node:events\");\nconst process = __importStar(__webpack_require__(/*! node:process */ \"node:process\"));\nconst util = __importStar(__webpack_require__(/*! node:util */ \"node:util\"));\nconst colours_1 = __webpack_require__(/*! ./colours */ \"(action-browser)/./node_modules/google-logging-utils/build/src/colours.js\");\n// Some functions (as noted) are based on the Node standard library, from\n// the following file:\n//\n// https://github.com/nodejs/node/blob/main/lib/internal/util/debuglog.js\n/**\n * This module defines an ad-hoc debug logger for Google Cloud Platform\n * client libraries in Node. An ad-hoc debug logger is a tool which lets\n * users use an external, unified interface (in this case, environment\n * variables) to determine what logging they want to see at runtime. This\n * isn't necessarily fed into the console, but is meant to be under the\n * control of the user. The kind of logging that will be produced by this\n * is more like \"call retry happened\", not \"event you'd want to record\n * in Cloud Logger\".\n *\n * More for Googlers implementing libraries with it:\n * go/cloud-client-logging-design\n */ /**\n * Possible log levels. These are a subset of Cloud Observability levels.\n * https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity\n */ var LogSeverity;\n(function(LogSeverity) {\n    LogSeverity[\"DEFAULT\"] = \"DEFAULT\";\n    LogSeverity[\"DEBUG\"] = \"DEBUG\";\n    LogSeverity[\"INFO\"] = \"INFO\";\n    LogSeverity[\"WARNING\"] = \"WARNING\";\n    LogSeverity[\"ERROR\"] = \"ERROR\";\n})(LogSeverity || (exports.LogSeverity = LogSeverity = {}));\n/**\n * Our logger instance. This actually contains the meat of dealing\n * with log lines, including EventEmitter. This contains the function\n * that will be passed back to users of the package.\n */ class AdhocDebugLogger extends node_events_1.EventEmitter {\n    /**\n     * @param upstream The backend will pass a function that will be\n     *   called whenever our logger function is invoked.\n     */ constructor(namespace, upstream){\n        super();\n        this.namespace = namespace;\n        this.upstream = upstream;\n        this.func = Object.assign(this.invoke.bind(this), {\n            // Also add an instance pointer back to us.\n            instance: this,\n            // And pull over the EventEmitter functionality.\n            on: (event, listener)=>this.on(event, listener)\n        });\n        // Convenience methods for log levels.\n        this.func.debug = (...args)=>this.invokeSeverity(LogSeverity.DEBUG, ...args);\n        this.func.info = (...args)=>this.invokeSeverity(LogSeverity.INFO, ...args);\n        this.func.warn = (...args)=>this.invokeSeverity(LogSeverity.WARNING, ...args);\n        this.func.error = (...args)=>this.invokeSeverity(LogSeverity.ERROR, ...args);\n        this.func.sublog = (namespace)=>log(namespace, this.func);\n    }\n    invoke(fields, ...args) {\n        // Push out any upstream logger first.\n        if (this.upstream) {\n            this.upstream(fields, ...args);\n        }\n        // Emit sink events.\n        this.emit(\"log\", fields, args);\n    }\n    invokeSeverity(severity, ...args) {\n        this.invoke({\n            severity\n        }, ...args);\n    }\n}\nexports.AdhocDebugLogger = AdhocDebugLogger;\n/**\n * This can be used in place of a real logger while waiting for Promises or disabling logging.\n */ exports.placeholder = new AdhocDebugLogger(\"\", ()=>{}).func;\n/**\n * The base class for debug logging backends. It's possible to use this, but the\n * same non-guarantees above still apply (unstable interface, etc).\n *\n * @private\n * @internal\n */ class DebugLogBackendBase {\n    constructor(){\n        var _a;\n        this.cached = new Map();\n        this.filters = [];\n        this.filtersSet = false;\n        // Look for the Node config variable for what systems to enable. We'll store\n        // these for the log method below, which will call setFilters() once.\n        let nodeFlag = (_a = process.env[exports.env.nodeEnables]) !== null && _a !== void 0 ? _a : \"*\";\n        if (nodeFlag === \"all\") {\n            nodeFlag = \"*\";\n        }\n        this.filters = nodeFlag.split(\",\");\n    }\n    log(namespace, fields, ...args) {\n        try {\n            if (!this.filtersSet) {\n                this.setFilters();\n                this.filtersSet = true;\n            }\n            let logger = this.cached.get(namespace);\n            if (!logger) {\n                logger = this.makeLogger(namespace);\n                this.cached.set(namespace, logger);\n            }\n            logger(fields, ...args);\n        } catch (e) {\n            // Silently ignore all errors; we don't want them to interfere with\n            // the user's running app.\n            // e;\n            console.error(e);\n        }\n    }\n}\nexports.DebugLogBackendBase = DebugLogBackendBase;\n// The basic backend. This one definitely works, but it's less feature-filled.\n//\n// Rather than using util.debuglog, this implements the same basic logic directly.\n// The reason for this decision is that debuglog checks the value of the\n// NODE_DEBUG environment variable before any user code runs; we therefore\n// can't pipe our own enables into it (and util.debuglog will never print unless\n// the user duplicates it into NODE_DEBUG, which isn't reasonable).\n//\nclass NodeBackend extends DebugLogBackendBase {\n    constructor(){\n        super(...arguments);\n        // Default to allowing all systems, since we gate earlier based on whether the\n        // variable is empty.\n        this.enabledRegexp = /.*/g;\n    }\n    isEnabled(namespace) {\n        return this.enabledRegexp.test(namespace);\n    }\n    makeLogger(namespace) {\n        if (!this.enabledRegexp.test(namespace)) {\n            return ()=>{};\n        }\n        return (fields, ...args)=>{\n            var _a;\n            // TODO: `fields` needs to be turned into a string here, one way or another.\n            const nscolour = `${colours_1.Colours.green}${namespace}${colours_1.Colours.reset}`;\n            const pid = `${colours_1.Colours.yellow}${process.pid}${colours_1.Colours.reset}`;\n            let level;\n            switch(fields.severity){\n                case LogSeverity.ERROR:\n                    level = `${colours_1.Colours.red}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                case LogSeverity.INFO:\n                    level = `${colours_1.Colours.magenta}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                case LogSeverity.WARNING:\n                    level = `${colours_1.Colours.yellow}${fields.severity}${colours_1.Colours.reset}`;\n                    break;\n                default:\n                    level = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.DEFAULT;\n                    break;\n            }\n            const msg = util.formatWithOptions({\n                colors: colours_1.Colours.enabled\n            }, ...args);\n            const filteredFields = Object.assign({}, fields);\n            delete filteredFields.severity;\n            const fieldsJson = Object.getOwnPropertyNames(filteredFields).length ? JSON.stringify(filteredFields) : \"\";\n            const fieldsColour = fieldsJson ? `${colours_1.Colours.grey}${fieldsJson}${colours_1.Colours.reset}` : \"\";\n            console.error(\"%s [%s|%s] %s%s\", pid, nscolour, level, msg, fieldsJson ? ` ${fieldsColour}` : \"\");\n        };\n    }\n    // Regexp patterns below are from here:\n    // https://github.com/nodejs/node/blob/c0aebed4b3395bd65d54b18d1fd00f071002ac20/lib/internal/util/debuglog.js#L36\n    setFilters() {\n        const totalFilters = this.filters.join(\",\");\n        const regexp = totalFilters.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\");\n        this.enabledRegexp = new RegExp(`^${regexp}$`, \"i\");\n    }\n}\n/**\n * @returns A backend based on Node util.debuglog; this is the default.\n */ function getNodeBackend() {\n    return new NodeBackend();\n}\nclass DebugBackend extends DebugLogBackendBase {\n    constructor(pkg){\n        super();\n        this.debugPkg = pkg;\n    }\n    makeLogger(namespace) {\n        const debugLogger = this.debugPkg(namespace);\n        return (fields, ...args)=>{\n            // TODO: `fields` needs to be turned into a string here.\n            debugLogger(args[0], ...args.slice(1));\n        };\n    }\n    setFilters() {\n        var _a;\n        const existingFilters = (_a = process.env[\"NODE_DEBUG\"]) !== null && _a !== void 0 ? _a : \"\";\n        process.env[\"NODE_DEBUG\"] = `${existingFilters}${existingFilters ? \",\" : \"\"}${this.filters.join(\",\")}`;\n    }\n}\n/**\n * Creates a \"debug\" package backend. The user must call require('debug') and pass\n * the resulting object to this function.\n *\n * ```\n *  setBackend(getDebugBackend(require('debug')))\n * ```\n *\n * https://www.npmjs.com/package/debug\n *\n * Note: Google does not explicitly endorse or recommend this package; it's just\n * being provided as an option.\n *\n * @returns A backend based on the npm \"debug\" package.\n */ function getDebugBackend(debugPkg) {\n    return new DebugBackend(debugPkg);\n}\n/**\n * This pretty much works like the Node logger, but it outputs structured\n * logging JSON matching Google Cloud's ingestion specs. Rather than handling\n * its own output, it wraps another backend. The passed backend must be a subclass\n * of `DebugLogBackendBase` (any of the backends exposed by this package will work).\n */ class StructuredBackend extends DebugLogBackendBase {\n    constructor(upstream){\n        var _a;\n        super();\n        this.upstream = (_a = upstream) !== null && _a !== void 0 ? _a : new NodeBackend();\n    }\n    makeLogger(namespace) {\n        const debugLogger = this.upstream.makeLogger(namespace);\n        return (fields, ...args)=>{\n            var _a;\n            const severity = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.INFO;\n            const json = Object.assign({\n                severity,\n                message: util.format(...args)\n            }, fields);\n            const jsonString = JSON.stringify(json);\n            debugLogger(fields, jsonString);\n        };\n    }\n    setFilters() {\n        this.upstream.setFilters();\n    }\n}\n/**\n * Creates a \"structured logging\" backend. This pretty much works like the\n * Node logger, but it outputs structured logging JSON matching Google\n * Cloud's ingestion specs instead of plain text.\n *\n * ```\n *  setBackend(getStructuredBackend())\n * ```\n *\n * @param upstream If you want to use something besides the Node backend to\n *   write the actual log lines into, pass that here.\n * @returns A backend based on Google Cloud structured logging.\n */ function getStructuredBackend(upstream) {\n    return new StructuredBackend(upstream);\n}\n/**\n * The environment variables that we standardized on, for all ad-hoc logging.\n */ exports.env = {\n    /**\n     * Filter wildcards specific to the Node syntax, and similar to the built-in\n     * utils.debuglog() environment variable. If missing, disables logging.\n     */ nodeEnables: \"GOOGLE_SDK_NODE_LOGGING\"\n};\n// Keep a copy of all namespaced loggers so users can reliably .on() them.\n// Note that these cached functions will need to deal with changes in the backend.\nconst loggerCache = new Map();\n// Our current global backend. This might be:\nlet cachedBackend = undefined;\n/**\n * Set the backend to use for our log output.\n * - A backend object\n * - null to disable logging\n * - undefined for \"nothing yet\", defaults to the Node backend\n *\n * @param backend Results from one of the get*Backend() functions.\n */ function setBackend(backend) {\n    cachedBackend = backend;\n    loggerCache.clear();\n}\n/**\n * Creates a logging function. Multiple calls to this with the same namespace\n * will produce the same logger, with the same event emitter hooks.\n *\n * Namespaces can be a simple string (\"system\" name), or a qualified string\n * (system:subsystem), which can be used for filtering, or for \"system:*\".\n *\n * @param namespace The namespace, a descriptive text string.\n * @returns A function you can call that works similar to console.log().\n */ function log(namespace, parent) {\n    // If the enable flag isn't set, do nothing.\n    const enablesFlag = process.env[exports.env.nodeEnables];\n    if (!enablesFlag) {\n        return exports.placeholder;\n    }\n    // This might happen mostly if the typings are dropped in a user's code,\n    // or if they're calling from JavaScript.\n    if (!namespace) {\n        return exports.placeholder;\n    }\n    // Handle sub-loggers.\n    if (parent) {\n        namespace = `${parent.instance.namespace}:${namespace}`;\n    }\n    // Reuse loggers so things like event sinks are persistent.\n    const existing = loggerCache.get(namespace);\n    if (existing) {\n        return existing.func;\n    }\n    // Do we have a backend yet?\n    if (cachedBackend === null) {\n        // Explicitly disabled.\n        return exports.placeholder;\n    } else if (cachedBackend === undefined) {\n        // One hasn't been made yet, so default to Node.\n        cachedBackend = getNodeBackend();\n    }\n    // The logger is further wrapped so we can handle the backend changing out.\n    const logger = (()=>{\n        let previousBackend = undefined;\n        const newLogger = new AdhocDebugLogger(namespace, (fields, ...args)=>{\n            if (previousBackend !== cachedBackend) {\n                // Did the user pass a custom backend?\n                if (cachedBackend === null) {\n                    // Explicitly disabled.\n                    return;\n                } else if (cachedBackend === undefined) {\n                    // One hasn't been made yet, so default to Node.\n                    cachedBackend = getNodeBackend();\n                }\n                previousBackend = cachedBackend;\n            }\n            cachedBackend === null || cachedBackend === void 0 ? void 0 : cachedBackend.log(namespace, fields, ...args);\n        });\n        return newLogger;\n    })();\n    loggerCache.set(namespace, logger);\n    return logger.func;\n} //# sourceMappingURL=logging-utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/google-logging-utils/build/src/logging-utils.js\n");

/***/ })

};
;