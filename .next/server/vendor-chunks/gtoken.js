/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gtoken";
exports.ids = ["vendor-chunks/gtoken"];
exports.modules = {

/***/ "(action-browser)/./node_modules/gtoken/build/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/gtoken/build/src/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */ var __classPrivateFieldGet = (void 0) && (void 0).__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (void 0) && (void 0).__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _GoogleToken_instances, _GoogleToken_inFlightRequest, _GoogleToken_getTokenAsync, _GoogleToken_getTokenAsyncInner, _GoogleToken_ensureEmail, _GoogleToken_revokeTokenAsync, _GoogleToken_configure, _GoogleToken_requestToken;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleToken = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nconst jws = __webpack_require__(/*! jws */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst readFile = fs.readFile ? (0, util_1.promisify)(fs.readFile) : async ()=>{\n    // if running in the web-browser, fs.readFile may not have been shimmed.\n    throw new ErrorWithCode(\"use key rather than keyFile.\", \"MISSING_CREDENTIALS\");\n};\nconst GOOGLE_TOKEN_URL = \"https://www.googleapis.com/oauth2/v4/token\";\nconst GOOGLE_REVOKE_TOKEN_URL = \"https://accounts.google.com/o/oauth2/revoke?token=\";\nclass ErrorWithCode extends Error {\n    constructor(message, code){\n        super(message);\n        this.code = code;\n    }\n}\nclass GoogleToken {\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */ constructor(options){\n        _GoogleToken_instances.add(this);\n        this.transporter = {\n            request: (opts)=>(0, gaxios_1.request)(opts)\n        };\n        _GoogleToken_inFlightRequest.set(this, void 0);\n        __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_configure).call(this, options);\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */ hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        } else {\n            return true;\n        }\n    }\n    /**\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\n     *\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n     */ isTokenExpiring() {\n        var _a;\n        const now = new Date().getTime();\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n        if (this.rawToken && this.expiresAt) {\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\n        } else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === \"object\") {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsync).call(this, opts).then((t)=>cb(null, t), callback);\n            return;\n        }\n        return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsync).call(this, opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */ async getCredentials(keyFile) {\n        const ext = path.extname(keyFile);\n        switch(ext){\n            case \".json\":\n                {\n                    const key = await readFile(keyFile, \"utf8\");\n                    const body = JSON.parse(key);\n                    const privateKey = body.private_key;\n                    const clientEmail = body.client_email;\n                    if (!privateKey || !clientEmail) {\n                        throw new ErrorWithCode(\"private_key and client_email are required.\", \"MISSING_CREDENTIALS\");\n                    }\n                    return {\n                        privateKey,\n                        clientEmail\n                    };\n                }\n            case \".der\":\n            case \".crt\":\n            case \".pem\":\n                {\n                    const privateKey = await readFile(keyFile, \"utf8\");\n                    return {\n                        privateKey\n                    };\n                }\n            case \".p12\":\n            case \".pfx\":\n                {\n                    throw new ErrorWithCode(\"*.p12 certificates are not supported after v6.1.2. \" + \"Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.\", \"UNKNOWN_CERTIFICATE_TYPE\");\n                }\n            default:\n                throw new ErrorWithCode(\"Unknown certificate type. Type is determined based on file extension. \" + \"Current supported extensions are *.json, and *.pem.\", \"UNKNOWN_CERTIFICATE_TYPE\");\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_revokeTokenAsync).call(this).then(()=>callback(), callback);\n            return;\n        }\n        return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_revokeTokenAsync).call(this);\n    }\n}\nexports.GoogleToken = GoogleToken;\n_GoogleToken_inFlightRequest = new WeakMap(), _GoogleToken_instances = new WeakSet(), _GoogleToken_getTokenAsync = async function _GoogleToken_getTokenAsync(opts) {\n    if (__classPrivateFieldGet(this, _GoogleToken_inFlightRequest, \"f\") && !opts.forceRefresh) {\n        return __classPrivateFieldGet(this, _GoogleToken_inFlightRequest, \"f\");\n    }\n    try {\n        return await __classPrivateFieldSet(this, _GoogleToken_inFlightRequest, __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_getTokenAsyncInner).call(this, opts), \"f\");\n    } finally{\n        __classPrivateFieldSet(this, _GoogleToken_inFlightRequest, undefined, \"f\");\n    }\n}, _GoogleToken_getTokenAsyncInner = async function _GoogleToken_getTokenAsyncInner(opts) {\n    if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n        return Promise.resolve(this.rawToken);\n    }\n    if (!this.key && !this.keyFile) {\n        throw new Error(\"No key or keyFile set.\");\n    }\n    if (!this.key && this.keyFile) {\n        const creds = await this.getCredentials(this.keyFile);\n        this.key = creds.privateKey;\n        this.iss = creds.clientEmail || this.iss;\n        if (!creds.clientEmail) {\n            __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_ensureEmail).call(this);\n        }\n    }\n    return __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_requestToken).call(this);\n}, _GoogleToken_ensureEmail = function _GoogleToken_ensureEmail() {\n    if (!this.iss) {\n        throw new ErrorWithCode(\"email is required.\", \"MISSING_CREDENTIALS\");\n    }\n}, _GoogleToken_revokeTokenAsync = async function _GoogleToken_revokeTokenAsync() {\n    if (!this.accessToken) {\n        throw new Error(\"No token to revoke.\");\n    }\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await this.transporter.request({\n        url,\n        retry: true\n    });\n    __classPrivateFieldGet(this, _GoogleToken_instances, \"m\", _GoogleToken_configure).call(this, {\n        email: this.iss,\n        sub: this.sub,\n        key: this.key,\n        keyFile: this.keyFile,\n        scope: this.scope,\n        additionalClaims: this.additionalClaims\n    });\n}, _GoogleToken_configure = function _GoogleToken_configure(options = {}) {\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n    if (typeof options.scope === \"object\") {\n        this.scope = options.scope.join(\" \");\n    } else {\n        this.scope = options.scope;\n    }\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    if (options.transporter) {\n        this.transporter = options.transporter;\n    }\n}, _GoogleToken_requestToken = /**\n * Request the token from Google.\n */ async function _GoogleToken_requestToken() {\n    var _a, _b;\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n        iss: this.iss,\n        scope: this.scope,\n        aud: GOOGLE_TOKEN_URL,\n        exp: iat + 3600,\n        iat,\n        sub: this.sub\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n        header: {\n            alg: \"RS256\"\n        },\n        payload,\n        secret: this.key\n    });\n    try {\n        const r = await this.transporter.request({\n            method: \"POST\",\n            url: GOOGLE_TOKEN_URL,\n            data: {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: signedJWT\n            },\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            responseType: \"json\",\n            retryConfig: {\n                httpMethodsToRetry: [\n                    \"POST\"\n                ]\n            }\n        });\n        this.rawToken = r.data;\n        this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n        return this.rawToken;\n    } catch (e) {\n        this.rawToken = undefined;\n        this.tokenExpires = undefined;\n        const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data : {};\n        if (body.error) {\n            const desc = body.error_description ? `: ${body.error_description}` : \"\";\n            e.message = `${body.error}${desc}`;\n        }\n        throw e;\n    }\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jwa/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jwa/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar formatEcdsa = __webpack_require__(/*! ecdsa-sig-formatter */ \"(action-browser)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".';\nvar MSG_INVALID_SECRET = \"secret must be a string or buffer\";\nvar MSG_INVALID_VERIFIER_KEY = \"key must be a string or a buffer\";\nvar MSG_INVALID_SIGNER_KEY = \"key must be a string, a buffer or an object\";\nvar supportsKeyObjects = typeof crypto.createPublicKey === \"function\";\nif (supportsKeyObjects) {\n    MSG_INVALID_VERIFIER_KEY += \" or a KeyObject\";\n    MSG_INVALID_SECRET += \"or a KeyObject\";\n}\nfunction checkIsPublicKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return;\n    }\n    if (!supportsKeyObjects) {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key !== \"object\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.type !== \"string\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.asymmetricKeyType !== \"string\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.export !== \"function\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n}\nfunction checkIsPrivateKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return;\n    }\n    if (typeof key === \"object\") {\n        return;\n    }\n    throw typeError(MSG_INVALID_SIGNER_KEY);\n}\nfunction checkIsSecretKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return key;\n    }\n    if (!supportsKeyObjects) {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (typeof key !== \"object\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (key.type !== \"secret\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (typeof key.export !== \"function\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n}\nfunction fromBase64(base64) {\n    return base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    var padding = 4 - base64url.length % 4;\n    if (padding !== 4) {\n        for(var i = 0; i < padding; ++i){\n            base64url += \"=\";\n        }\n    }\n    return base64url.replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n}\nfunction typeError(template) {\n    var args = [].slice.call(arguments, 1);\n    var errMsg = util.format.bind(util, template).apply(null, args);\n    return new TypeError(errMsg);\n}\nfunction bufferOrString(obj) {\n    return Buffer.isBuffer(obj) || typeof obj === \"string\";\n}\nfunction normalizeInput(thing) {\n    if (!bufferOrString(thing)) thing = JSON.stringify(thing);\n    return thing;\n}\nfunction createHmacSigner(bits) {\n    return function sign(thing, secret) {\n        checkIsSecretKey(secret);\n        thing = normalizeInput(thing);\n        var hmac = crypto.createHmac(\"sha\" + bits, secret);\n        var sig = (hmac.update(thing), hmac.digest(\"base64\"));\n        return fromBase64(sig);\n    };\n}\nvar bufferEqual;\nvar timingSafeEqual = \"timingSafeEqual\" in crypto ? function timingSafeEqual(a, b) {\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    return crypto.timingSafeEqual(a, b);\n} : function timingSafeEqual(a, b) {\n    if (!bufferEqual) {\n        bufferEqual = __webpack_require__(/*! buffer-equal-constant-time */ \"(action-browser)/./node_modules/buffer-equal-constant-time/index.js\");\n    }\n    return bufferEqual(a, b);\n};\nfunction createHmacVerifier(bits) {\n    return function verify(thing, signature, secret) {\n        var computedSig = createHmacSigner(bits)(thing, secret);\n        return timingSafeEqual(Buffer.from(signature), Buffer.from(computedSig));\n    };\n}\nfunction createKeySigner(bits) {\n    return function sign(thing, privateKey) {\n        checkIsPrivateKey(privateKey);\n        thing = normalizeInput(thing);\n        // Even though we are specifying \"RSA\" here, this works with ECDSA\n        // keys as well.\n        var signer = crypto.createSign(\"RSA-SHA\" + bits);\n        var sig = (signer.update(thing), signer.sign(privateKey, \"base64\"));\n        return fromBase64(sig);\n    };\n}\nfunction createKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n        checkIsPublicKey(publicKey);\n        thing = normalizeInput(thing);\n        signature = toBase64(signature);\n        var verifier = crypto.createVerify(\"RSA-SHA\" + bits);\n        verifier.update(thing);\n        return verifier.verify(publicKey, signature, \"base64\");\n    };\n}\nfunction createPSSKeySigner(bits) {\n    return function sign(thing, privateKey) {\n        checkIsPrivateKey(privateKey);\n        thing = normalizeInput(thing);\n        var signer = crypto.createSign(\"RSA-SHA\" + bits);\n        var sig = (signer.update(thing), signer.sign({\n            key: privateKey,\n            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n        }, \"base64\"));\n        return fromBase64(sig);\n    };\n}\nfunction createPSSKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n        checkIsPublicKey(publicKey);\n        thing = normalizeInput(thing);\n        signature = toBase64(signature);\n        var verifier = crypto.createVerify(\"RSA-SHA\" + bits);\n        verifier.update(thing);\n        return verifier.verify({\n            key: publicKey,\n            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n        }, signature, \"base64\");\n    };\n}\nfunction createECDSASigner(bits) {\n    var inner = createKeySigner(bits);\n    return function sign() {\n        var signature = inner.apply(null, arguments);\n        signature = formatEcdsa.derToJose(signature, \"ES\" + bits);\n        return signature;\n    };\n}\nfunction createECDSAVerifer(bits) {\n    var inner = createKeyVerifier(bits);\n    return function verify(thing, signature, publicKey) {\n        signature = formatEcdsa.joseToDer(signature, \"ES\" + bits).toString(\"base64\");\n        var result = inner(thing, signature, publicKey);\n        return result;\n    };\n}\nfunction createNoneSigner() {\n    return function sign() {\n        return \"\";\n    };\n}\nfunction createNoneVerifier() {\n    return function verify(thing, signature) {\n        return signature === \"\";\n    };\n}\nmodule.exports = function jwa(algorithm) {\n    var signerFactories = {\n        hs: createHmacSigner,\n        rs: createKeySigner,\n        ps: createPSSKeySigner,\n        es: createECDSASigner,\n        none: createNoneSigner\n    };\n    var verifierFactories = {\n        hs: createHmacVerifier,\n        rs: createKeyVerifier,\n        ps: createPSSKeyVerifier,\n        es: createECDSAVerifer,\n        none: createNoneVerifier\n    };\n    var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);\n    if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n    var algo = (match[1] || match[3]).toLowerCase();\n    var bits = match[2];\n    return {\n        sign: signerFactories[algo](bits),\n        verify: verifierFactories[algo](bits)\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jwa/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jws/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jws/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*global exports*/ var SignStream = __webpack_require__(/*! ./lib/sign-stream */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/sign-stream.js\");\nvar VerifyStream = __webpack_require__(/*! ./lib/verify-stream */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/verify-stream.js\");\nvar ALGORITHMS = [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"PS256\",\n    \"PS384\",\n    \"PS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n];\nexports.ALGORITHMS = ALGORITHMS;\nexports.sign = SignStream.sign;\nexports.verify = VerifyStream.verify;\nexports.decode = VerifyStream.decode;\nexports.isValid = VerifyStream.isValid;\nexports.createSign = function createSign(opts) {\n    return new SignStream(opts);\n};\nexports.createVerify = function createVerify(opts) {\n    return new VerifyStream(opts);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ndG9rZW4vbm9kZV9tb2R1bGVzL2p3cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsR0FDaEIsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDekIsSUFBSUMsZUFBZUQsbUJBQU9BLENBQUM7QUFFM0IsSUFBSUUsYUFBYTtJQUNmO0lBQVM7SUFBUztJQUNsQjtJQUFTO0lBQVM7SUFDbEI7SUFBUztJQUFTO0lBQ2xCO0lBQVM7SUFBUztDQUNuQjtBQUVEQyxrQkFBa0IsR0FBR0Q7QUFDckJDLFlBQVksR0FBR0osV0FBV0ssSUFBSTtBQUM5QkQsY0FBYyxHQUFHRixhQUFhSSxNQUFNO0FBQ3BDRixjQUFjLEdBQUdGLGFBQWFLLE1BQU07QUFDcENILGVBQWUsR0FBR0YsYUFBYU0sT0FBTztBQUN0Q0osa0JBQWtCLEdBQUcsU0FBU0ssV0FBV0MsSUFBSTtJQUMzQyxPQUFPLElBQUlWLFdBQVdVO0FBQ3hCO0FBQ0FOLG9CQUFvQixHQUFHLFNBQVNPLGFBQWFELElBQUk7SUFDL0MsT0FBTyxJQUFJUixhQUFhUTtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ3Rva2VuL25vZGVfbW9kdWxlcy9qd3MvaW5kZXguanM/NTUzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBleHBvcnRzKi9cbnZhciBTaWduU3RyZWFtID0gcmVxdWlyZSgnLi9saWIvc2lnbi1zdHJlYW0nKTtcbnZhciBWZXJpZnlTdHJlYW0gPSByZXF1aXJlKCcuL2xpYi92ZXJpZnktc3RyZWFtJyk7XG5cbnZhciBBTEdPUklUSE1TID0gW1xuICAnSFMyNTYnLCAnSFMzODQnLCAnSFM1MTInLFxuICAnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLFxuICAnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLFxuICAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXG5dO1xuXG5leHBvcnRzLkFMR09SSVRITVMgPSBBTEdPUklUSE1TO1xuZXhwb3J0cy5zaWduID0gU2lnblN0cmVhbS5zaWduO1xuZXhwb3J0cy52ZXJpZnkgPSBWZXJpZnlTdHJlYW0udmVyaWZ5O1xuZXhwb3J0cy5kZWNvZGUgPSBWZXJpZnlTdHJlYW0uZGVjb2RlO1xuZXhwb3J0cy5pc1ZhbGlkID0gVmVyaWZ5U3RyZWFtLmlzVmFsaWQ7XG5leHBvcnRzLmNyZWF0ZVNpZ24gPSBmdW5jdGlvbiBjcmVhdGVTaWduKG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBTaWduU3RyZWFtKG9wdHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlVmVyaWZ5ID0gZnVuY3Rpb24gY3JlYXRlVmVyaWZ5KG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnlTdHJlYW0ob3B0cyk7XG59O1xuIl0sIm5hbWVzIjpbIlNpZ25TdHJlYW0iLCJyZXF1aXJlIiwiVmVyaWZ5U3RyZWFtIiwiQUxHT1JJVEhNUyIsImV4cG9ydHMiLCJzaWduIiwidmVyaWZ5IiwiZGVjb2RlIiwiaXNWYWxpZCIsImNyZWF0ZVNpZ24iLCJvcHRzIiwiY3JlYXRlVmVyaWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jws/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jws/lib/data-stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jws/lib/data-stream.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*global module, process*/ \nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction DataStream(data) {\n    this.buffer = null;\n    this.writable = true;\n    this.readable = true;\n    // No input\n    if (!data) {\n        this.buffer = Buffer.alloc(0);\n        return this;\n    }\n    // Stream\n    if (typeof data.pipe === \"function\") {\n        this.buffer = Buffer.alloc(0);\n        data.pipe(this);\n        return this;\n    }\n    // Buffer or String\n    // or Object (assumedly a passworded key)\n    if (data.length || typeof data === \"object\") {\n        this.buffer = data;\n        this.writable = false;\n        process.nextTick((function() {\n            this.emit(\"end\", data);\n            this.readable = false;\n            this.emit(\"close\");\n        }).bind(this));\n        return this;\n    }\n    throw new TypeError(\"Unexpected data type (\" + typeof data + \")\");\n}\nutil.inherits(DataStream, Stream);\nDataStream.prototype.write = function write(data) {\n    this.buffer = Buffer.concat([\n        this.buffer,\n        Buffer.from(data)\n    ]);\n    this.emit(\"data\", data);\n};\nDataStream.prototype.end = function end(data) {\n    if (data) this.write(data);\n    this.emit(\"end\", data);\n    this.emit(\"close\");\n    this.writable = false;\n    this.readable = false;\n};\nmodule.exports = DataStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ndG9rZW4vbm9kZV9tb2R1bGVzL2p3cy9saWIvZGF0YS1zdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsd0JBQXdCO0FBQ3hCLElBQUlBLFNBQVNDLHVHQUE2QjtBQUMxQyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUVuQixTQUFTRyxXQUFXQyxJQUFJO0lBQ3RCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2QsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFFaEIsV0FBVztJQUNYLElBQUksQ0FBQ0gsTUFBTTtRQUNULElBQUksQ0FBQ0MsTUFBTSxHQUFHTixPQUFPUyxLQUFLLENBQUM7UUFDM0IsT0FBTyxJQUFJO0lBQ2I7SUFFQSxTQUFTO0lBQ1QsSUFBSSxPQUFPSixLQUFLSyxJQUFJLEtBQUssWUFBWTtRQUNuQyxJQUFJLENBQUNKLE1BQU0sR0FBR04sT0FBT1MsS0FBSyxDQUFDO1FBQzNCSixLQUFLSyxJQUFJLENBQUMsSUFBSTtRQUNkLE9BQU8sSUFBSTtJQUNiO0lBRUEsbUJBQW1CO0lBQ25CLHlDQUF5QztJQUN6QyxJQUFJTCxLQUFLTSxNQUFNLElBQUksT0FBT04sU0FBUyxVQUFVO1FBQzNDLElBQUksQ0FBQ0MsTUFBTSxHQUFHRDtRQUNkLElBQUksQ0FBQ0UsUUFBUSxHQUFHO1FBQ2hCSyxRQUFRQyxRQUFRLENBQUM7WUFDZixJQUFJLENBQUNDLElBQUksQ0FBQyxPQUFPVDtZQUNqQixJQUFJLENBQUNHLFFBQVEsR0FBRztZQUNoQixJQUFJLENBQUNNLElBQUksQ0FBQztRQUNaLEdBQUVDLElBQUksQ0FBQyxJQUFJO1FBQ1gsT0FBTyxJQUFJO0lBQ2I7SUFFQSxNQUFNLElBQUlDLFVBQVUsMkJBQTBCLE9BQU9YLE9BQU87QUFDOUQ7QUFDQUYsS0FBS2MsUUFBUSxDQUFDYixZQUFZRjtBQUUxQkUsV0FBV2MsU0FBUyxDQUFDQyxLQUFLLEdBQUcsU0FBU0EsTUFBTWQsSUFBSTtJQUM5QyxJQUFJLENBQUNDLE1BQU0sR0FBR04sT0FBT29CLE1BQU0sQ0FBQztRQUFDLElBQUksQ0FBQ2QsTUFBTTtRQUFFTixPQUFPcUIsSUFBSSxDQUFDaEI7S0FBTTtJQUM1RCxJQUFJLENBQUNTLElBQUksQ0FBQyxRQUFRVDtBQUNwQjtBQUVBRCxXQUFXYyxTQUFTLENBQUNJLEdBQUcsR0FBRyxTQUFTQSxJQUFJakIsSUFBSTtJQUMxQyxJQUFJQSxNQUNGLElBQUksQ0FBQ2MsS0FBSyxDQUFDZDtJQUNiLElBQUksQ0FBQ1MsSUFBSSxDQUFDLE9BQU9UO0lBQ2pCLElBQUksQ0FBQ1MsSUFBSSxDQUFDO0lBQ1YsSUFBSSxDQUFDUCxRQUFRLEdBQUc7SUFDaEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7QUFDbEI7QUFFQWUsT0FBT0MsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2d0b2tlbi9ub2RlX21vZHVsZXMvandzL2xpYi9kYXRhLXN0cmVhbS5qcz8zNzNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIG1vZHVsZSwgcHJvY2VzcyovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gRGF0YVN0cmVhbShkYXRhKSB7XG4gIHRoaXMuYnVmZmVyID0gbnVsbDtcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIE5vIGlucHV0XG4gIGlmICghZGF0YSkge1xuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gU3RyZWFtXG4gIGlmICh0eXBlb2YgZGF0YS5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgZGF0YS5waXBlKHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gQnVmZmVyIG9yIFN0cmluZ1xuICAvLyBvciBPYmplY3QgKGFzc3VtZWRseSBhIHBhc3N3b3JkZWQga2V5KVxuICBpZiAoZGF0YS5sZW5ndGggfHwgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XG4gICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZW1pdCgnZW5kJywgZGF0YSk7XG4gICAgICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgZGF0YSB0eXBlICgnKyB0eXBlb2YgZGF0YSArICcpJyk7XG59XG51dGlsLmluaGVyaXRzKERhdGFTdHJlYW0sIFN0cmVhbSk7XG5cbkRhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUoZGF0YSkge1xuICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmZmVyLCBCdWZmZXIuZnJvbShkYXRhKV0pO1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbn07XG5cbkRhdGFTdHJlYW0ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIGVuZChkYXRhKSB7XG4gIGlmIChkYXRhKVxuICAgIHRoaXMud3JpdGUoZGF0YSk7XG4gIHRoaXMuZW1pdCgnZW5kJywgZGF0YSk7XG4gIHRoaXMuZW1pdCgnY2xvc2UnKTtcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFTdHJlYW07XG4iXSwibmFtZXMiOlsiQnVmZmVyIiwicmVxdWlyZSIsIlN0cmVhbSIsInV0aWwiLCJEYXRhU3RyZWFtIiwiZGF0YSIsImJ1ZmZlciIsIndyaXRhYmxlIiwicmVhZGFibGUiLCJhbGxvYyIsInBpcGUiLCJsZW5ndGgiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJlbWl0IiwiYmluZCIsIlR5cGVFcnJvciIsImluaGVyaXRzIiwicHJvdG90eXBlIiwid3JpdGUiLCJjb25jYXQiLCJmcm9tIiwiZW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jws/lib/data-stream.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jws/lib/sign-stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jws/lib/sign-stream.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*global module*/ \nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar DataStream = __webpack_require__(/*! ./data-stream */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/data-stream.js\");\nvar jwa = __webpack_require__(/*! jwa */ \"(action-browser)/./node_modules/gtoken/node_modules/jwa/index.js\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar toString = __webpack_require__(/*! ./tostring */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/tostring.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nfunction base64url(string, encoding) {\n    return Buffer.from(string, encoding).toString(\"base64\").replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction jwsSecuredInput(header, payload, encoding) {\n    encoding = encoding || \"utf8\";\n    var encodedHeader = base64url(toString(header), \"binary\");\n    var encodedPayload = base64url(toString(payload), encoding);\n    return util.format(\"%s.%s\", encodedHeader, encodedPayload);\n}\nfunction jwsSign(opts) {\n    var header = opts.header;\n    var payload = opts.payload;\n    var secretOrKey = opts.secret || opts.privateKey;\n    var encoding = opts.encoding;\n    var algo = jwa(header.alg);\n    var securedInput = jwsSecuredInput(header, payload, encoding);\n    var signature = algo.sign(securedInput, secretOrKey);\n    return util.format(\"%s.%s\", securedInput, signature);\n}\nfunction SignStream(opts) {\n    var secret = opts.secret || opts.privateKey || opts.key;\n    var secretStream = new DataStream(secret);\n    this.readable = true;\n    this.header = opts.header;\n    this.encoding = opts.encoding;\n    this.secret = this.privateKey = this.key = secretStream;\n    this.payload = new DataStream(opts.payload);\n    this.secret.once(\"close\", (function() {\n        if (!this.payload.writable && this.readable) this.sign();\n    }).bind(this));\n    this.payload.once(\"close\", (function() {\n        if (!this.secret.writable && this.readable) this.sign();\n    }).bind(this));\n}\nutil.inherits(SignStream, Stream);\nSignStream.prototype.sign = function sign() {\n    try {\n        var signature = jwsSign({\n            header: this.header,\n            payload: this.payload.buffer,\n            secret: this.secret.buffer,\n            encoding: this.encoding\n        });\n        this.emit(\"done\", signature);\n        this.emit(\"data\", signature);\n        this.emit(\"end\");\n        this.readable = false;\n        return signature;\n    } catch (e) {\n        this.readable = false;\n        this.emit(\"error\", e);\n        this.emit(\"close\");\n    }\n};\nSignStream.sign = jwsSign;\nmodule.exports = SignStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ndG9rZW4vbm9kZV9tb2R1bGVzL2p3cy9saWIvc2lnbi1zdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLElBQUlBLFNBQVNDLHVHQUE2QjtBQUMxQyxJQUFJQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJRSxNQUFNRixtQkFBT0EsQ0FBQztBQUNsQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJSSxXQUFXSixtQkFBT0EsQ0FBQztBQUN2QixJQUFJSyxPQUFPTCxtQkFBT0EsQ0FBQztBQUVuQixTQUFTTSxVQUFVQyxNQUFNLEVBQUVDLFFBQVE7SUFDakMsT0FBT1QsT0FDSlUsSUFBSSxDQUFDRixRQUFRQyxVQUNiSixRQUFRLENBQUMsVUFDVE0sT0FBTyxDQUFDLE1BQU0sSUFDZEEsT0FBTyxDQUFDLE9BQU8sS0FDZkEsT0FBTyxDQUFDLE9BQU87QUFDcEI7QUFFQSxTQUFTQyxnQkFBZ0JDLE1BQU0sRUFBRUMsT0FBTyxFQUFFTCxRQUFRO0lBQ2hEQSxXQUFXQSxZQUFZO0lBQ3ZCLElBQUlNLGdCQUFnQlIsVUFBVUYsU0FBU1EsU0FBUztJQUNoRCxJQUFJRyxpQkFBaUJULFVBQVVGLFNBQVNTLFVBQVVMO0lBQ2xELE9BQU9ILEtBQUtXLE1BQU0sQ0FBQyxTQUFTRixlQUFlQztBQUM3QztBQUVBLFNBQVNFLFFBQVFDLElBQUk7SUFDbkIsSUFBSU4sU0FBU00sS0FBS04sTUFBTTtJQUN4QixJQUFJQyxVQUFVSyxLQUFLTCxPQUFPO0lBQzFCLElBQUlNLGNBQWNELEtBQUtFLE1BQU0sSUFBSUYsS0FBS0csVUFBVTtJQUNoRCxJQUFJYixXQUFXVSxLQUFLVixRQUFRO0lBQzVCLElBQUljLE9BQU9wQixJQUFJVSxPQUFPVyxHQUFHO0lBQ3pCLElBQUlDLGVBQWViLGdCQUFnQkMsUUFBUUMsU0FBU0w7SUFDcEQsSUFBSWlCLFlBQVlILEtBQUtJLElBQUksQ0FBQ0YsY0FBY0w7SUFDeEMsT0FBT2QsS0FBS1csTUFBTSxDQUFDLFNBQVNRLGNBQWNDO0FBQzVDO0FBRUEsU0FBU0UsV0FBV1QsSUFBSTtJQUN0QixJQUFJRSxTQUFTRixLQUFLRSxNQUFNLElBQUVGLEtBQUtHLFVBQVUsSUFBRUgsS0FBS1UsR0FBRztJQUNuRCxJQUFJQyxlQUFlLElBQUk1QixXQUFXbUI7SUFDbEMsSUFBSSxDQUFDVSxRQUFRLEdBQUc7SUFDaEIsSUFBSSxDQUFDbEIsTUFBTSxHQUFHTSxLQUFLTixNQUFNO0lBQ3pCLElBQUksQ0FBQ0osUUFBUSxHQUFHVSxLQUFLVixRQUFRO0lBQzdCLElBQUksQ0FBQ1ksTUFBTSxHQUFHLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUksQ0FBQ08sR0FBRyxHQUFHQztJQUMzQyxJQUFJLENBQUNoQixPQUFPLEdBQUcsSUFBSVosV0FBV2lCLEtBQUtMLE9BQU87SUFDMUMsSUFBSSxDQUFDTyxNQUFNLENBQUNXLElBQUksQ0FBQyxTQUFTO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUNsQixPQUFPLENBQUNtQixRQUFRLElBQUksSUFBSSxDQUFDRixRQUFRLEVBQ3pDLElBQUksQ0FBQ0osSUFBSTtJQUNiLEdBQUVPLElBQUksQ0FBQyxJQUFJO0lBRVgsSUFBSSxDQUFDcEIsT0FBTyxDQUFDa0IsSUFBSSxDQUFDLFNBQVM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxRQUFRLElBQUksSUFBSSxDQUFDRixRQUFRLEVBQ3hDLElBQUksQ0FBQ0osSUFBSTtJQUNiLEdBQUVPLElBQUksQ0FBQyxJQUFJO0FBQ2I7QUFDQTVCLEtBQUs2QixRQUFRLENBQUNQLFlBQVl4QjtBQUUxQndCLFdBQVdRLFNBQVMsQ0FBQ1QsSUFBSSxHQUFHLFNBQVNBO0lBQ25DLElBQUk7UUFDRixJQUFJRCxZQUFZUixRQUFRO1lBQ3RCTCxRQUFRLElBQUksQ0FBQ0EsTUFBTTtZQUNuQkMsU0FBUyxJQUFJLENBQUNBLE9BQU8sQ0FBQ3VCLE1BQU07WUFDNUJoQixRQUFRLElBQUksQ0FBQ0EsTUFBTSxDQUFDZ0IsTUFBTTtZQUMxQjVCLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1FBQ3pCO1FBQ0EsSUFBSSxDQUFDNkIsSUFBSSxDQUFDLFFBQVFaO1FBQ2xCLElBQUksQ0FBQ1ksSUFBSSxDQUFDLFFBQVFaO1FBQ2xCLElBQUksQ0FBQ1ksSUFBSSxDQUFDO1FBQ1YsSUFBSSxDQUFDUCxRQUFRLEdBQUc7UUFDaEIsT0FBT0w7SUFDVCxFQUFFLE9BQU9hLEdBQUc7UUFDVixJQUFJLENBQUNSLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNPLElBQUksQ0FBQyxTQUFTQztRQUNuQixJQUFJLENBQUNELElBQUksQ0FBQztJQUNaO0FBQ0Y7QUFFQVYsV0FBV0QsSUFBSSxHQUFHVDtBQUVsQnNCLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2d0b2tlbi9ub2RlX21vZHVsZXMvandzL2xpYi9zaWduLXN0cmVhbS5qcz9lY2ExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIG1vZHVsZSovXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgRGF0YVN0cmVhbSA9IHJlcXVpcmUoJy4vZGF0YS1zdHJlYW0nKTtcbnZhciBqd2EgPSByZXF1aXJlKCdqd2EnKTtcbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9zdHJpbmcnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBiYXNlNjR1cmwoc3RyaW5nLCBlbmNvZGluZykge1xuICByZXR1cm4gQnVmZmVyXG4gICAgLmZyb20oc3RyaW5nLCBlbmNvZGluZylcbiAgICAudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgLnJlcGxhY2UoLz0vZywgJycpXG4gICAgLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufVxuXG5mdW5jdGlvbiBqd3NTZWN1cmVkSW5wdXQoaGVhZGVyLCBwYXlsb2FkLCBlbmNvZGluZykge1xuICBlbmNvZGluZyA9IGVuY29kaW5nIHx8ICd1dGY4JztcbiAgdmFyIGVuY29kZWRIZWFkZXIgPSBiYXNlNjR1cmwodG9TdHJpbmcoaGVhZGVyKSwgJ2JpbmFyeScpO1xuICB2YXIgZW5jb2RlZFBheWxvYWQgPSBiYXNlNjR1cmwodG9TdHJpbmcocGF5bG9hZCksIGVuY29kaW5nKTtcbiAgcmV0dXJuIHV0aWwuZm9ybWF0KCclcy4lcycsIGVuY29kZWRIZWFkZXIsIGVuY29kZWRQYXlsb2FkKTtcbn1cblxuZnVuY3Rpb24gandzU2lnbihvcHRzKSB7XG4gIHZhciBoZWFkZXIgPSBvcHRzLmhlYWRlcjtcbiAgdmFyIHBheWxvYWQgPSBvcHRzLnBheWxvYWQ7XG4gIHZhciBzZWNyZXRPcktleSA9IG9wdHMuc2VjcmV0IHx8IG9wdHMucHJpdmF0ZUtleTtcbiAgdmFyIGVuY29kaW5nID0gb3B0cy5lbmNvZGluZztcbiAgdmFyIGFsZ28gPSBqd2EoaGVhZGVyLmFsZyk7XG4gIHZhciBzZWN1cmVkSW5wdXQgPSBqd3NTZWN1cmVkSW5wdXQoaGVhZGVyLCBwYXlsb2FkLCBlbmNvZGluZyk7XG4gIHZhciBzaWduYXR1cmUgPSBhbGdvLnNpZ24oc2VjdXJlZElucHV0LCBzZWNyZXRPcktleSk7XG4gIHJldHVybiB1dGlsLmZvcm1hdCgnJXMuJXMnLCBzZWN1cmVkSW5wdXQsIHNpZ25hdHVyZSk7XG59XG5cbmZ1bmN0aW9uIFNpZ25TdHJlYW0ob3B0cykge1xuICB2YXIgc2VjcmV0ID0gb3B0cy5zZWNyZXR8fG9wdHMucHJpdmF0ZUtleXx8b3B0cy5rZXk7XG4gIHZhciBzZWNyZXRTdHJlYW0gPSBuZXcgRGF0YVN0cmVhbShzZWNyZXQpO1xuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcbiAgdGhpcy5oZWFkZXIgPSBvcHRzLmhlYWRlcjtcbiAgdGhpcy5lbmNvZGluZyA9IG9wdHMuZW5jb2Rpbmc7XG4gIHRoaXMuc2VjcmV0ID0gdGhpcy5wcml2YXRlS2V5ID0gdGhpcy5rZXkgPSBzZWNyZXRTdHJlYW07XG4gIHRoaXMucGF5bG9hZCA9IG5ldyBEYXRhU3RyZWFtKG9wdHMucGF5bG9hZCk7XG4gIHRoaXMuc2VjcmV0Lm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5wYXlsb2FkLndyaXRhYmxlICYmIHRoaXMucmVhZGFibGUpXG4gICAgICB0aGlzLnNpZ24oKTtcbiAgfS5iaW5kKHRoaXMpKTtcblxuICB0aGlzLnBheWxvYWQub25jZSgnY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnNlY3JldC53cml0YWJsZSAmJiB0aGlzLnJlYWRhYmxlKVxuICAgICAgdGhpcy5zaWduKCk7XG4gIH0uYmluZCh0aGlzKSk7XG59XG51dGlsLmluaGVyaXRzKFNpZ25TdHJlYW0sIFN0cmVhbSk7XG5cblNpZ25TdHJlYW0ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKCkge1xuICB0cnkge1xuICAgIHZhciBzaWduYXR1cmUgPSBqd3NTaWduKHtcbiAgICAgIGhlYWRlcjogdGhpcy5oZWFkZXIsXG4gICAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQuYnVmZmVyLFxuICAgICAgc2VjcmV0OiB0aGlzLnNlY3JldC5idWZmZXIsXG4gICAgICBlbmNvZGluZzogdGhpcy5lbmNvZGluZ1xuICAgIH0pO1xuICAgIHRoaXMuZW1pdCgnZG9uZScsIHNpZ25hdHVyZSk7XG4gICAgdGhpcy5lbWl0KCdkYXRhJywgc2lnbmF0dXJlKTtcbiAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlKTtcbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG4gIH1cbn07XG5cblNpZ25TdHJlYW0uc2lnbiA9IGp3c1NpZ247XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnblN0cmVhbTtcbiJdLCJuYW1lcyI6WyJCdWZmZXIiLCJyZXF1aXJlIiwiRGF0YVN0cmVhbSIsImp3YSIsIlN0cmVhbSIsInRvU3RyaW5nIiwidXRpbCIsImJhc2U2NHVybCIsInN0cmluZyIsImVuY29kaW5nIiwiZnJvbSIsInJlcGxhY2UiLCJqd3NTZWN1cmVkSW5wdXQiLCJoZWFkZXIiLCJwYXlsb2FkIiwiZW5jb2RlZEhlYWRlciIsImVuY29kZWRQYXlsb2FkIiwiZm9ybWF0IiwiandzU2lnbiIsIm9wdHMiLCJzZWNyZXRPcktleSIsInNlY3JldCIsInByaXZhdGVLZXkiLCJhbGdvIiwiYWxnIiwic2VjdXJlZElucHV0Iiwic2lnbmF0dXJlIiwic2lnbiIsIlNpZ25TdHJlYW0iLCJrZXkiLCJzZWNyZXRTdHJlYW0iLCJyZWFkYWJsZSIsIm9uY2UiLCJ3cml0YWJsZSIsImJpbmQiLCJpbmhlcml0cyIsInByb3RvdHlwZSIsImJ1ZmZlciIsImVtaXQiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jws/lib/sign-stream.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jws/lib/tostring.js":
/*!**************************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jws/lib/tostring.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*global module*/ \nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nmodule.exports = function toString(obj) {\n    if (typeof obj === \"string\") return obj;\n    if (typeof obj === \"number\" || Buffer.isBuffer(obj)) return obj.toString();\n    return JSON.stringify(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ndG9rZW4vbm9kZV9tb2R1bGVzL2p3cy9saWIvdG9zdHJpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZTtBQUNmLElBQUlBLFNBQVNDLG9EQUF3QjtBQUVyQ0MsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLFNBQVNDLEdBQUc7SUFDcEMsSUFBSSxPQUFPQSxRQUFRLFVBQ2pCLE9BQU9BO0lBQ1QsSUFBSSxPQUFPQSxRQUFRLFlBQVlMLE9BQU9NLFFBQVEsQ0FBQ0QsTUFDN0MsT0FBT0EsSUFBSUQsUUFBUTtJQUNyQixPQUFPRyxLQUFLQyxTQUFTLENBQUNIO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9ndG9rZW4vbm9kZV9tb2R1bGVzL2p3cy9saWIvdG9zdHJpbmcuanM/OWRiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBtb2R1bGUqL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0b1N0cmluZyhvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIHJldHVybiBvYmo7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fCBCdWZmZXIuaXNCdWZmZXIob2JqKSlcbiAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xufTtcbiJdLCJuYW1lcyI6WyJCdWZmZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRvU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jws/lib/tostring.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/gtoken/node_modules/jws/lib/verify-stream.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gtoken/node_modules/jws/lib/verify-stream.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*global module*/ \nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(action-browser)/./node_modules/safe-buffer/index.js\").Buffer);\nvar DataStream = __webpack_require__(/*! ./data-stream */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/data-stream.js\");\nvar jwa = __webpack_require__(/*! jwa */ \"(action-browser)/./node_modules/gtoken/node_modules/jwa/index.js\");\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\nvar toString = __webpack_require__(/*! ./tostring */ \"(action-browser)/./node_modules/gtoken/node_modules/jws/lib/tostring.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\nfunction isObject(thing) {\n    return Object.prototype.toString.call(thing) === \"[object Object]\";\n}\nfunction safeJsonParse(thing) {\n    if (isObject(thing)) return thing;\n    try {\n        return JSON.parse(thing);\n    } catch (e) {\n        return undefined;\n    }\n}\nfunction headerFromJWS(jwsSig) {\n    var encodedHeader = jwsSig.split(\".\", 1)[0];\n    return safeJsonParse(Buffer.from(encodedHeader, \"base64\").toString(\"binary\"));\n}\nfunction securedInputFromJWS(jwsSig) {\n    return jwsSig.split(\".\", 2).join(\".\");\n}\nfunction signatureFromJWS(jwsSig) {\n    return jwsSig.split(\".\")[2];\n}\nfunction payloadFromJWS(jwsSig, encoding) {\n    encoding = encoding || \"utf8\";\n    var payload = jwsSig.split(\".\")[1];\n    return Buffer.from(payload, \"base64\").toString(encoding);\n}\nfunction isValidJws(string) {\n    return JWS_REGEX.test(string) && !!headerFromJWS(string);\n}\nfunction jwsVerify(jwsSig, algorithm, secretOrKey) {\n    if (!algorithm) {\n        var err = new Error(\"Missing algorithm parameter for jws.verify\");\n        err.code = \"MISSING_ALGORITHM\";\n        throw err;\n    }\n    jwsSig = toString(jwsSig);\n    var signature = signatureFromJWS(jwsSig);\n    var securedInput = securedInputFromJWS(jwsSig);\n    var algo = jwa(algorithm);\n    return algo.verify(securedInput, signature, secretOrKey);\n}\nfunction jwsDecode(jwsSig, opts) {\n    opts = opts || {};\n    jwsSig = toString(jwsSig);\n    if (!isValidJws(jwsSig)) return null;\n    var header = headerFromJWS(jwsSig);\n    if (!header) return null;\n    var payload = payloadFromJWS(jwsSig);\n    if (header.typ === \"JWT\" || opts.json) payload = JSON.parse(payload, opts.encoding);\n    return {\n        header: header,\n        payload: payload,\n        signature: signatureFromJWS(jwsSig)\n    };\n}\nfunction VerifyStream(opts) {\n    opts = opts || {};\n    var secretOrKey = opts.secret || opts.publicKey || opts.key;\n    var secretStream = new DataStream(secretOrKey);\n    this.readable = true;\n    this.algorithm = opts.algorithm;\n    this.encoding = opts.encoding;\n    this.secret = this.publicKey = this.key = secretStream;\n    this.signature = new DataStream(opts.signature);\n    this.secret.once(\"close\", (function() {\n        if (!this.signature.writable && this.readable) this.verify();\n    }).bind(this));\n    this.signature.once(\"close\", (function() {\n        if (!this.secret.writable && this.readable) this.verify();\n    }).bind(this));\n}\nutil.inherits(VerifyStream, Stream);\nVerifyStream.prototype.verify = function verify() {\n    try {\n        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);\n        var obj = jwsDecode(this.signature.buffer, this.encoding);\n        this.emit(\"done\", valid, obj);\n        this.emit(\"data\", valid);\n        this.emit(\"end\");\n        this.readable = false;\n        return valid;\n    } catch (e) {\n        this.readable = false;\n        this.emit(\"error\", e);\n        this.emit(\"close\");\n    }\n};\nVerifyStream.decode = jwsDecode;\nVerifyStream.isValid = isValidJws;\nVerifyStream.verify = jwsVerify;\nmodule.exports = VerifyStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/gtoken/node_modules/jws/lib/verify-stream.js\n");

/***/ })

};
;