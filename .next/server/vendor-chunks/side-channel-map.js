"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/side-channel-map";
exports.ids = ["vendor-chunks/side-channel-map"];
exports.modules = {

/***/ "(action-browser)/./node_modules/side-channel-map/index.js":
/*!************************************************!*\
  !*** ./node_modules/side-channel-map/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"(action-browser)/./node_modules/get-intrinsic/index.js\");\nvar callBound = __webpack_require__(/*! call-bound */ \"(action-browser)/./node_modules/call-bound/index.js\");\nvar inspect = __webpack_require__(/*! object-inspect */ \"(action-browser)/./node_modules/object-inspect/index.js\");\nvar $TypeError = __webpack_require__(/*! es-errors/type */ \"(action-browser)/./node_modules/es-errors/type.js\");\nvar $Map = GetIntrinsic(\"%Map%\", true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */ var $mapGet = callBound(\"Map.prototype.get\", true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */ var $mapSet = callBound(\"Map.prototype.set\", true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapHas = callBound(\"Map.prototype.has\", true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapDelete = callBound(\"Map.prototype.delete\", true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */ var $mapSize = callBound(\"Map.prototype.size\", true);\n/** @type {import('.')} */ module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n    /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {Map<K, V> | undefined} */ var $m;\n    /** @type {Channel} */ var channel = {\n        assert: function(key) {\n            if (!channel.has(key)) {\n                throw new $TypeError(\"Side channel does not contain \" + inspect(key));\n            }\n        },\n        \"delete\": function(key) {\n            if ($m) {\n                var result = $mapDelete($m, key);\n                if ($mapSize($m) === 0) {\n                    $m = void undefined;\n                }\n                return result;\n            }\n            return false;\n        },\n        get: function(key) {\n            if ($m) {\n                return $mapGet($m, key);\n            }\n        },\n        has: function(key) {\n            if ($m) {\n                return $mapHas($m, key);\n            }\n            return false;\n        },\n        set: function(key, value) {\n            if (!$m) {\n                // @ts-expect-error TS can't handle narrowing a variable inside a closure\n                $m = new $Map();\n            }\n            $mapSet($m, key, value);\n        }\n    };\n    // @ts-expect-error TODO: figure out why TS is erroring here\n    return channel;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9zaWRlLWNoYW5uZWwtbWFwL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUM7QUFDM0IsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUM7QUFFdEIsSUFBSUcsYUFBYUgsbUJBQU9BLENBQUM7QUFDekIsSUFBSUksT0FBT0wsYUFBYSxTQUFTO0FBRWpDLG9EQUFvRCxHQUNwRCxJQUFJTSxVQUFVSixVQUFVLHFCQUFxQjtBQUM3QyxpRUFBaUUsR0FDakUsSUFBSUssVUFBVUwsVUFBVSxxQkFBcUI7QUFDN0MsMERBQTBELEdBQzFELElBQUlNLFVBQVVOLFVBQVUscUJBQXFCO0FBQzdDLDBEQUEwRCxHQUMxRCxJQUFJTyxhQUFhUCxVQUFVLHdCQUF3QjtBQUNuRCxpREFBaUQsR0FDakQsSUFBSVEsV0FBV1IsVUFBVSxzQkFBc0I7QUFFL0Msd0JBQXdCLEdBQ3hCUyxPQUFPQyxPQUFPLEdBQUcsQ0FBQyxDQUFDUCxRQUFRLHdDQUF3QyxHQUFHLFNBQVNRO0lBQzlFLDREQUE0RCxHQUM1RCwrQ0FBK0MsR0FDL0MsK0NBQStDLEdBRS9DLGtDQUFrQyxHQUFHLElBQUlDO0lBRXpDLG9CQUFvQixHQUNwQixJQUFJQyxVQUFVO1FBQ2JDLFFBQVEsU0FBVUMsR0FBRztZQUNwQixJQUFJLENBQUNGLFFBQVFHLEdBQUcsQ0FBQ0QsTUFBTTtnQkFDdEIsTUFBTSxJQUFJYixXQUFXLG1DQUFtQ0QsUUFBUWM7WUFDakU7UUFDRDtRQUNBLFVBQVUsU0FBVUEsR0FBRztZQUN0QixJQUFJSCxJQUFJO2dCQUNQLElBQUlLLFNBQVNWLFdBQVdLLElBQUlHO2dCQUM1QixJQUFJUCxTQUFTSSxRQUFRLEdBQUc7b0JBQ3ZCQSxLQUFLLEtBQUtNO2dCQUNYO2dCQUNBLE9BQU9EO1lBQ1I7WUFDQSxPQUFPO1FBQ1I7UUFDQUUsS0FBSyxTQUFVSixHQUFHO1lBQ2pCLElBQUlILElBQUk7Z0JBQ1AsT0FBT1IsUUFBUVEsSUFBSUc7WUFDcEI7UUFDRDtRQUNBQyxLQUFLLFNBQVVELEdBQUc7WUFDakIsSUFBSUgsSUFBSTtnQkFDUCxPQUFPTixRQUFRTSxJQUFJRztZQUNwQjtZQUNBLE9BQU87UUFDUjtRQUNBSyxLQUFLLFNBQVVMLEdBQUcsRUFBRU0sS0FBSztZQUN4QixJQUFJLENBQUNULElBQUk7Z0JBQ1IseUVBQXlFO2dCQUN6RUEsS0FBSyxJQUFJVDtZQUNWO1lBQ0FFLFFBQVFPLElBQUlHLEtBQUtNO1FBQ2xCO0lBQ0Q7SUFFQSw0REFBNEQ7SUFDNUQsT0FBT1I7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsLW1hcC9pbmRleC5qcz8zNWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSykgPT4gVn0gKi9cbnZhciAkbWFwR2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEssIHZhbHVlOiBWKSA9PiB2b2lkfSAqL1xudmFyICRtYXBTZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4sIGtleTogSykgPT4gYm9vbGVhbn0gKi9cbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJG1hcERlbGV0ZSA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5kZWxldGUnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPikgPT4gbnVtYmVyfSAqL1xudmFyICRtYXBTaXplID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNpemUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gISEkTWFwICYmIC8qKiBAdHlwZSB7RXhjbHVkZTxpbXBvcnQoJy4nKSwgZmFsc2U+fSAqLyBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbE1hcCgpIHtcblx0LyoqIEB0eXBlZGVmIHtSZXR1cm5UeXBlPHR5cGVvZiBnZXRTaWRlQ2hhbm5lbE1hcD59IENoYW5uZWwgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ2dldCddPlswXX0gSyAqL1xuXHQvKiogQHR5cGVkZWYge1BhcmFtZXRlcnM8Q2hhbm5lbFsnc2V0J10+WzFdfSBWICovXG5cblx0LyoqIEB0eXBlIHtNYXA8SywgVj4gfCB1bmRlZmluZWR9ICovIHZhciAkbTtcblxuXHQvKiogQHR5cGUge0NoYW5uZWx9ICovXG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdCdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9ICRtYXBEZWxldGUoJG0sIGtleSk7XG5cdFx0XHRcdGlmICgkbWFwU2l6ZSgkbSkgPT09IDApIHtcblx0XHRcdFx0XHQkbSA9IHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHJldHVybiAkbWFwR2V0KCRtLCBrZXkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0cmV0dXJuICRtYXBIYXMoJG0sIGtleSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgY2FuJ3QgaGFuZGxlIG5hcnJvd2luZyBhIHZhcmlhYmxlIGluc2lkZSBhIGNsb3N1cmVcblx0XHRcdFx0JG0gPSBuZXcgJE1hcCgpO1xuXHRcdFx0fVxuXHRcdFx0JG1hcFNldCgkbSwga2V5LCB2YWx1ZSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZmlndXJlIG91dCB3aHkgVFMgaXMgZXJyb3JpbmcgaGVyZVxuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsImNhbGxCb3VuZCIsImluc3BlY3QiLCIkVHlwZUVycm9yIiwiJE1hcCIsIiRtYXBHZXQiLCIkbWFwU2V0IiwiJG1hcEhhcyIsIiRtYXBEZWxldGUiLCIkbWFwU2l6ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRTaWRlQ2hhbm5lbE1hcCIsIiRtIiwiY2hhbm5lbCIsImFzc2VydCIsImtleSIsImhhcyIsInJlc3VsdCIsInVuZGVmaW5lZCIsImdldCIsInNldCIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/side-channel-map/index.js\n");

/***/ })

};
;