"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/side-channel-list";
exports.ids = ["vendor-chunks/side-channel-list"];
exports.modules = {

/***/ "(action-browser)/./node_modules/side-channel-list/index.js":
/*!*************************************************!*\
  !*** ./node_modules/side-channel-list/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar inspect = __webpack_require__(/*! object-inspect */ \"(action-browser)/./node_modules/object-inspect/index.js\");\nvar $TypeError = __webpack_require__(/*! es-errors/type */ \"(action-browser)/./node_modules/es-errors/type.js\");\n/*\n* This function traverses the list returning the node corresponding to the given key.\n*\n* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.\n* By doing so, all the recently used nodes can be accessed relatively quickly.\n*/ /** @type {import('./list.d.ts').listGetNode} */ // eslint-disable-next-line consistent-return\nvar listGetNode = function(list, key, isDelete) {\n    /** @type {typeof list | NonNullable<(typeof list)['next']>} */ var prev = list;\n    /** @type {(typeof list)['next']} */ var curr;\n    // eslint-disable-next-line eqeqeq\n    for(; (curr = prev.next) != null; prev = curr){\n        if (curr.key === key) {\n            prev.next = curr.next;\n            if (!isDelete) {\n                // eslint-disable-next-line no-extra-parens\n                curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;\n                list.next = curr; // eslint-disable-line no-param-reassign\n            }\n            return curr;\n        }\n    }\n};\n/** @type {import('./list.d.ts').listGet} */ var listGet = function(objects, key) {\n    if (!objects) {\n        return void undefined;\n    }\n    var node = listGetNode(objects, key);\n    return node && node.value;\n};\n/** @type {import('./list.d.ts').listSet} */ var listSet = function(objects, key, value) {\n    var node = listGetNode(objects, key);\n    if (node) {\n        node.value = value;\n    } else {\n        // Prepend the new node to the beginning of the list\n        objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */ {\n            key: key,\n            next: objects.next,\n            value: value\n        };\n    }\n};\n/** @type {import('./list.d.ts').listHas} */ var listHas = function(objects, key) {\n    if (!objects) {\n        return false;\n    }\n    return !!listGetNode(objects, key);\n};\n/** @type {import('./list.d.ts').listDelete} */ // eslint-disable-next-line consistent-return\nvar listDelete = function(objects, key) {\n    if (objects) {\n        return listGetNode(objects, key, true);\n    }\n};\n/** @type {import('.')} */ module.exports = function getSideChannelList() {\n    /** @typedef {ReturnType<typeof getSideChannelList>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {import('./list.d.ts').RootNode<V, K> | undefined} */ var $o;\n    /** @type {Channel} */ var channel = {\n        assert: function(key) {\n            if (!channel.has(key)) {\n                throw new $TypeError(\"Side channel does not contain \" + inspect(key));\n            }\n        },\n        \"delete\": function(key) {\n            var root = $o && $o.next;\n            var deletedNode = listDelete($o, key);\n            if (deletedNode && root && root === deletedNode) {\n                $o = void undefined;\n            }\n            return !!deletedNode;\n        },\n        get: function(key) {\n            return listGet($o, key);\n        },\n        has: function(key) {\n            return listHas($o, key);\n        },\n        set: function(key, value) {\n            if (!$o) {\n                // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n                $o = {\n                    next: void undefined\n                };\n            }\n            // eslint-disable-next-line no-extra-parens\n            listSet(/** @type {NonNullable<typeof $o>} */ $o, key, value);\n        }\n    };\n    // @ts-expect-error TODO: figure out why this is erroring\n    return channel;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/side-channel-list/index.js\n");

/***/ })

};
;