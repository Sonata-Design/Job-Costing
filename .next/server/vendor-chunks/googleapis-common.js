"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/googleapis-common";
exports.ids = ["vendor-chunks/googleapis-common"];
exports.modules = {

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/apiIndex.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/apiIndex.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAPI = void 0;\nfunction getAPI(api, options, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nversions, context) {\n    let version;\n    if (typeof options === \"string\") {\n        version = options;\n        options = {};\n    } else if (typeof options === \"object\") {\n        version = options.version;\n        delete options.version;\n    } else {\n        throw new Error(\"Argument error: Accepts only string or object\");\n    }\n    try {\n        const ctr = versions[version];\n        const ep = new ctr(options, context);\n        return Object.freeze(ep);\n    } catch (e) {\n        throw new Error(`Unable to load endpoint ${api}(\"${version}\"): ${e.message}`);\n    }\n}\nexports.getAPI = getAPI; //# sourceMappingURL=apiIndex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvYXBpSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBRyxLQUFLO0FBQ3RCLFNBQVNFLE9BQU9DLEdBQUcsRUFBRUMsT0FBTyxFQUM1Qiw4REFBOEQ7QUFDOURDLFFBQVEsRUFBRUMsT0FBTztJQUNiLElBQUlDO0lBQ0osSUFBSSxPQUFPSCxZQUFZLFVBQVU7UUFDN0JHLFVBQVVIO1FBQ1ZBLFVBQVUsQ0FBQztJQUNmLE9BQ0ssSUFBSSxPQUFPQSxZQUFZLFVBQVU7UUFDbENHLFVBQVVILFFBQVFHLE9BQU87UUFDekIsT0FBT0gsUUFBUUcsT0FBTztJQUMxQixPQUNLO1FBQ0QsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsSUFBSTtRQUNBLE1BQU1DLE1BQU1KLFFBQVEsQ0FBQ0UsUUFBUTtRQUM3QixNQUFNRyxLQUFLLElBQUlELElBQUlMLFNBQVNFO1FBQzVCLE9BQU9SLE9BQU9hLE1BQU0sQ0FBQ0Q7SUFDekIsRUFDQSxPQUFPRSxHQUFHO1FBQ04sTUFBTSxJQUFJSixNQUFNLENBQUMsd0JBQXdCLEVBQUVMLElBQUksRUFBRSxFQUFFSSxRQUFRLElBQUksRUFBRUssRUFBRUMsT0FBTyxDQUFDLENBQUM7SUFDaEY7QUFDSjtBQUNBYixjQUFjLEdBQUdFLFFBQ2pCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2FwaUluZGV4LmpzPzYzNmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QVBJID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0QVBJKGFwaSwgb3B0aW9ucywgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudmVyc2lvbnMsIGNvbnRleHQpIHtcbiAgICBsZXQgdmVyc2lvbjtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZlcnNpb24gPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uO1xuICAgICAgICBkZWxldGUgb3B0aW9ucy52ZXJzaW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBlcnJvcjogQWNjZXB0cyBvbmx5IHN0cmluZyBvciBvYmplY3QnKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY3RyID0gdmVyc2lvbnNbdmVyc2lvbl07XG4gICAgICAgIGNvbnN0IGVwID0gbmV3IGN0cihvcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUoZXApO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIGVuZHBvaW50ICR7YXBpfShcIiR7dmVyc2lvbn1cIik6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0QVBJID0gZ2V0QVBJO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpSW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QVBJIiwiYXBpIiwib3B0aW9ucyIsInZlcnNpb25zIiwiY29udGV4dCIsInZlcnNpb24iLCJFcnJvciIsImN0ciIsImVwIiwiZnJlZXplIiwiZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/apiIndex.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/apirequest.js":
/*!****************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/apirequest.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createAPIRequest = void 0;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nconst qs = __webpack_require__(/*! qs */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst urlTemplate = __webpack_require__(/*! url-template */ \"(action-browser)/./node_modules/url-template/lib/url-template.js\");\nconst uuid = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(action-browser)/./node_modules/extend/index.js\");\nconst isbrowser_1 = __webpack_require__(/*! ./isbrowser */ \"(action-browser)/./node_modules/googleapis-common/build/src/isbrowser.js\");\nconst h2 = __webpack_require__(/*! ./http2 */ \"(action-browser)/./node_modules/googleapis-common/build/src/http2.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(action-browser)/./node_modules/googleapis-common/package.json\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isReadableStream(obj) {\n    return obj !== null && typeof obj === \"object\" && typeof obj.pipe === \"function\" && obj.readable !== false && typeof obj._read === \"function\" && typeof obj._readableState === \"object\";\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach((param)=>{\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then((r)=>callback(null, r), callback);\n    } else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    var _a, _b, _c, _d;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call with the global options configured at the API Context\n    // level, or at the global level.\n    const options = extend(true, {}, ((_a = parameters.context.google) === null || _a === void 0 ? void 0 : _a._options) || {}, parameters.context._options || {}, parameters.options // API call params\n    );\n    const params = extend(true, {}, options.params, parameters.params // API call params\n    );\n    options.userAgentDirectives = options.userAgentDirectives || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */ let resource = params.requestBody;\n    if (!params.requestBody && params.resource && (!parameters.requiredParams.includes(\"resource\") || typeof params.resource !== \"string\")) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth || options.auth;\n    const defaultMime = typeof media.body === \"string\" ? \"text/plain\" : \"application/octet-stream\";\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers, options.apiVersion);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach((key)=>{\n        if (key.slice(-1) === \"_\") {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error(\"Missing required parameters: \" + missingParams.join(\", \"));\n    }\n    // Parse urls\n    if (options.url) {\n        let url = options.url;\n        if (typeof url === \"object\") {\n            url = url.toString();\n        }\n        options.url = urlTemplate.parse(url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n        const originalUrl = new URL(options.url);\n        const path = originalUrl.href.substr(originalUrl.origin.length);\n        options.url = new URL(path, parameters.context._options.rootUrl).href;\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = (params)=>{\n        return qs.stringify(params, {\n            arrayFormat: \"repeat\"\n        });\n    };\n    // delete path params from the params object so they do not end up in query\n    parameters.pathParams.forEach((param)=>delete params[param]);\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === \"string\") {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    function multipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n            flush (callback) {\n                this.push(\"\\r\\n\");\n                this.push(finale);\n                callback();\n            }\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers[\"content-type\"] = `multipart/related; boundary=${boundary}`;\n        for (const part of multipart){\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part[\"content-type\"]}\\r\\n\\r\\n`;\n            rStream.push(preamble);\n            if (typeof part.body === \"string\") {\n                rStream.push(part.body);\n                rStream.push(\"\\r\\n\");\n            } else {\n                // Gaxios does not natively support onUploadProgress in node.js.\n                // Pipe through the pStream first to read the number of bytes read\n                // for the purpose of tracking progress.\n                pStream.on(\"progress\", (bytesRead)=>{\n                    if (options.onUploadProgress) {\n                        options.onUploadProgress({\n                            bytesRead\n                        });\n                    }\n                });\n                part.body.pipe(pStream).pipe(rStream);\n            }\n        }\n        if (!isStream) {\n            rStream.push(finale);\n            rStream.push(null);\n        }\n        options.data = rStream;\n    }\n    function browserMultipartUpload(multipart) {\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        headers[\"content-type\"] = `multipart/related; boundary=${boundary}`;\n        let content = \"\";\n        for (const part of multipart){\n            const preamble = `--${boundary}\\r\\ncontent-type: ${part[\"content-type\"]}\\r\\n\\r\\n`;\n            content += preamble;\n            if (typeof part.body === \"string\") {\n                content += part.body;\n                content += \"\\r\\n\";\n            }\n        }\n        content += finale;\n        options.data = content;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            params.uploadType = \"multipart\";\n            const multipart = [\n                {\n                    \"content-type\": \"application/json\",\n                    body: JSON.stringify(resource)\n                },\n                {\n                    \"content-type\": media.mimeType || resource && resource.mimeType || defaultMime,\n                    body: media.body\n                }\n            ];\n            if (!(0, isbrowser_1.isBrowser)()) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                multipartUpload(multipart);\n            } else {\n                browserMultipartUpload(multipart);\n            }\n        } else {\n            params.uploadType = \"media\";\n            Object.assign(headers, {\n                \"content-type\": media.mimeType || defaultMime\n            });\n            options.data = media.body;\n        }\n    } else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!(0, isbrowser_1.isBrowser)()) {\n        options.headers[\"Accept-Encoding\"] = \"gzip\";\n        options.userAgentDirectives.push({\n            product: \"google-api-nodejs-client\",\n            version: pkg.version,\n            comment: \"gzip\"\n        });\n        const userAgent = options.userAgentDirectives.map((d)=>{\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        }).join(\" \");\n        options.headers[\"User-Agent\"] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = (status)=>{\n            return status >= 200 && status < 300 || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    delete options.auth; // is overridden by our auth code\n    // Determine TPC universe\n    if (options.universeDomain && options.universe_domain && options.universeDomain !== options.universe_domain) {\n        throw new Error(\"Please set either universe_domain or universeDomain, but not both.\");\n    }\n    const universeDomainEnvVar = typeof process === \"object\" && typeof process.env === \"object\" ? process.env[\"GOOGLE_CLOUD_UNIVERSE_DOMAIN\"] : undefined;\n    const universeDomain = (_d = (_c = (_b = options.universeDomain) !== null && _b !== void 0 ? _b : options.universe_domain) !== null && _c !== void 0 ? _c : universeDomainEnvVar) !== null && _d !== void 0 ? _d : \"googleapis.com\";\n    // Update URL to point to the given TPC universe\n    if (universeDomain !== \"googleapis.com\" && options.url) {\n        const url = new URL(options.url);\n        if (url.hostname.endsWith(\".googleapis.com\")) {\n            url.hostname = url.hostname.replace(/googleapis\\.com$/, universeDomain);\n            options.url = url.toString();\n        }\n    }\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === \"object\") {\n        // Validate TPC universe\n        const universeFromAuth = typeof authClient.getUniverseDomain === \"function\" ? await authClient.getUniverseDomain() : undefined;\n        if (universeFromAuth && universeDomain !== universeFromAuth) {\n            throw new Error(`The configured universe domain (${universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` + \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\n        }\n        if (options.http2) {\n            const authHeaders = await authClient.getRequestHeaders(options.url);\n            const mooOpts = Object.assign({}, options);\n            mooOpts.headers = Object.assign(mooOpts.headers, authHeaders);\n            return h2.request(mooOpts);\n        } else {\n            return authClient.request(options);\n        }\n    } else {\n        return new google_auth_library_1.DefaultTransporter().request(options);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */ class ProgressStream extends stream.Transform {\n    constructor(){\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit(\"progress\", this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers, apiVersion) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!(0, isbrowser_1.isBrowser)()) {\n        headers[\"x-goog-api-client\"] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n    if (apiVersion) {\n        headers[\"x-goog-api-version\"] = apiVersion;\n    }\n} //# sourceMappingURL=apirequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/apirequest.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/authplus.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/authplus.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthPlus = void 0;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nclass AuthPlus extends google_auth_library_1.GoogleAuth {\n    constructor(){\n        super(...arguments);\n        this.JWT = google_auth_library_1.JWT;\n        this.Compute = google_auth_library_1.Compute;\n        this.OAuth2 = google_auth_library_1.OAuth2Client;\n        this.GoogleAuth = google_auth_library_1.GoogleAuth;\n        this.AwsClient = google_auth_library_1.AwsClient;\n        this.IdentityPoolClient = google_auth_library_1.IdentityPoolClient;\n        this.ExternalAccountClient = google_auth_library_1.ExternalAccountClient;\n    }\n    /**\n     * Override getClient(), memoizing an instance of auth for\n     * subsequent calls to getProjectId().\n     */ async getClient(options) {\n        this._cachedAuth = new google_auth_library_1.GoogleAuth(options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this._cachedAuth.getClient();\n    }\n    getProjectId(callback) {\n        if (callback) {\n            return this._cachedAuth ? this._cachedAuth.getProjectId(callback) : super.getProjectId(callback);\n        } else {\n            return this._cachedAuth ? this._cachedAuth.getProjectId() : super.getProjectId();\n        }\n    }\n}\nexports.AuthPlus = AuthPlus; //# sourceMappingURL=authplus.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvYXV0aHBsdXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUcsd0JBQXdCQyxtQkFBT0EsQ0FBQyxtR0FBcUI7QUFDM0QsTUFBTUYsaUJBQWlCQyxzQkFBc0JFLFVBQVU7SUFDbkRDLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxHQUFHLEdBQUdMLHNCQUFzQkssR0FBRztRQUNwQyxJQUFJLENBQUNDLE9BQU8sR0FBR04sc0JBQXNCTSxPQUFPO1FBQzVDLElBQUksQ0FBQ0MsTUFBTSxHQUFHUCxzQkFBc0JRLFlBQVk7UUFDaEQsSUFBSSxDQUFDTixVQUFVLEdBQUdGLHNCQUFzQkUsVUFBVTtRQUNsRCxJQUFJLENBQUNPLFNBQVMsR0FBR1Qsc0JBQXNCUyxTQUFTO1FBQ2hELElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdWLHNCQUFzQlUsa0JBQWtCO1FBQ2xFLElBQUksQ0FBQ0MscUJBQXFCLEdBQUdYLHNCQUFzQlcscUJBQXFCO0lBQzVFO0lBQ0E7OztLQUdDLEdBQ0QsTUFBTUMsVUFBVUMsT0FBTyxFQUFFO1FBQ3JCLElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlkLHNCQUFzQkUsVUFBVSxDQUFDVztRQUN4RCw4REFBOEQ7UUFDOUQsT0FBTyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0YsU0FBUztJQUNyQztJQUNBRyxhQUFhQyxRQUFRLEVBQUU7UUFDbkIsSUFBSUEsVUFBVTtZQUNWLE9BQU8sSUFBSSxDQUFDRixXQUFXLEdBQ2pCLElBQUksQ0FBQ0EsV0FBVyxDQUFDQyxZQUFZLENBQUNDLFlBQzlCLEtBQUssQ0FBQ0QsYUFBYUM7UUFDN0IsT0FDSztZQUNELE9BQU8sSUFBSSxDQUFDRixXQUFXLEdBQ2pCLElBQUksQ0FBQ0EsV0FBVyxDQUFDQyxZQUFZLEtBQzdCLEtBQUssQ0FBQ0E7UUFDaEI7SUFDSjtBQUNKO0FBQ0FsQixnQkFBZ0IsR0FBR0UsVUFDbkIsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvYXV0aHBsdXMuanM/YTY3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BdXRoUGx1cyA9IHZvaWQgMDtcbmNvbnN0IGdvb2dsZV9hdXRoX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCJnb29nbGUtYXV0aC1saWJyYXJ5XCIpO1xuY2xhc3MgQXV0aFBsdXMgZXh0ZW5kcyBnb29nbGVfYXV0aF9saWJyYXJ5XzEuR29vZ2xlQXV0aCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuSldUID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkpXVDtcbiAgICAgICAgdGhpcy5Db21wdXRlID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkNvbXB1dGU7XG4gICAgICAgIHRoaXMuT0F1dGgyID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLk9BdXRoMkNsaWVudDtcbiAgICAgICAgdGhpcy5Hb29nbGVBdXRoID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGg7XG4gICAgICAgIHRoaXMuQXdzQ2xpZW50ID0gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkF3c0NsaWVudDtcbiAgICAgICAgdGhpcy5JZGVudGl0eVBvb2xDbGllbnQgPSBnb29nbGVfYXV0aF9saWJyYXJ5XzEuSWRlbnRpdHlQb29sQ2xpZW50O1xuICAgICAgICB0aGlzLkV4dGVybmFsQWNjb3VudENsaWVudCA9IGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5FeHRlcm5hbEFjY291bnRDbGllbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGdldENsaWVudCgpLCBtZW1vaXppbmcgYW4gaW5zdGFuY2Ugb2YgYXV0aCBmb3JcbiAgICAgKiBzdWJzZXF1ZW50IGNhbGxzIHRvIGdldFByb2plY3RJZCgpLlxuICAgICAqL1xuICAgIGFzeW5jIGdldENsaWVudChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZEF1dGggPSBuZXcgZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkdvb2dsZUF1dGgob3B0aW9ucyk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRBdXRoLmdldENsaWVudCgpO1xuICAgIH1cbiAgICBnZXRQcm9qZWN0SWQoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQXV0aFxuICAgICAgICAgICAgICAgID8gdGhpcy5fY2FjaGVkQXV0aC5nZXRQcm9qZWN0SWQoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgOiBzdXBlci5nZXRQcm9qZWN0SWQoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZEF1dGhcbiAgICAgICAgICAgICAgICA/IHRoaXMuX2NhY2hlZEF1dGguZ2V0UHJvamVjdElkKClcbiAgICAgICAgICAgICAgICA6IHN1cGVyLmdldFByb2plY3RJZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BdXRoUGx1cyA9IEF1dGhQbHVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aHBsdXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQXV0aFBsdXMiLCJnb29nbGVfYXV0aF9saWJyYXJ5XzEiLCJyZXF1aXJlIiwiR29vZ2xlQXV0aCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiSldUIiwiQ29tcHV0ZSIsIk9BdXRoMiIsIk9BdXRoMkNsaWVudCIsIkF3c0NsaWVudCIsIklkZW50aXR5UG9vbENsaWVudCIsIkV4dGVybmFsQWNjb3VudENsaWVudCIsImdldENsaWVudCIsIm9wdGlvbnMiLCJfY2FjaGVkQXV0aCIsImdldFByb2plY3RJZCIsImNhbGxiYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/authplus.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/discovery.js":
/*!***************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/discovery.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Discovery = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nconst resolve = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(action-browser)/./node_modules/googleapis-common/build/src/apirequest.js\");\nconst endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(action-browser)/./node_modules/googleapis-common/build/src/endpoint.js\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */ constructor(options){\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */ makeEndpoint(schema) {\n        return (options)=>{\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */ log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */ async discoverAllAPIs(discoveryUrl) {\n        const headers = this.options.includePrivate ? {} : {\n            \"X-User-Ip\": \"0.0.0.0\"\n        };\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api)=>{\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return {\n                api,\n                endpointCreator\n            };\n        }));\n        const versionIndex = {};\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const apisIndex = {};\n        for (const set of apis){\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options)=>{\n                    const type = typeof options;\n                    let version;\n                    if (type === \"string\") {\n                        version = options;\n                        options = {};\n                    } else if (type === \"object\") {\n                        version = options.version;\n                        delete options.version;\n                    } else {\n                        throw new Error(\"Argument error: Accepts only string or object\");\n                    }\n                    try {\n                        const ep = set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    } catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */ async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === \"string\") {\n            const parts = resolve.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log(\"Reading from file \" + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, {\n                    encoding: \"utf8\"\n                });\n                return this.makeEndpoint(JSON.parse(file));\n            } else {\n                this.log(\"Requesting \" + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl\n                });\n                return this.makeEndpoint(res.data);\n            }\n        } else {\n            const options = apiDiscoveryUrl;\n            this.log(\"Requesting \" + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: {\n                    url,\n                    method: \"GET\"\n                },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: {\n                    google: {\n                        _options: {}\n                    },\n                    _options: {}\n                }\n            };\n            const res = await (0, apirequest_1.createAPIRequest)(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery; //# sourceMappingURL=discovery.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/discovery.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/endpoint.js":
/*!**************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/endpoint.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Endpoint = void 0;\nconst apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(action-browser)/./node_modules/googleapis-common/build/src/apirequest.js\");\nclass Endpoint {\n    constructor(options){\n        this._options = options || {};\n    }\n    /**\n     * Given a schema, add methods and resources to a target.\n     *\n     * @param {object} target The target to which to apply the schema.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods and\n     * resources.\n     * @param {object} context The context to add to each method.\n     */ applySchema(target, rootSchema, schema, context) {\n        this.applyMethodsFromSchema(target, rootSchema, schema, context);\n        if (schema.resources) {\n            for(const resourceName in schema.resources){\n                if (Object.prototype.hasOwnProperty.call(schema.resources, resourceName)) {\n                    const resource = schema.resources[resourceName];\n                    if (!target[resourceName]) {\n                        target[resourceName] = {};\n                    }\n                    this.applySchema(target[resourceName], rootSchema, resource, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */ applyMethodsFromSchema(target, rootSchema, schema, context) {\n        if (schema.methods) {\n            for(const name in schema.methods){\n                if (Object.prototype.hasOwnProperty.call(schema.methods, name)) {\n                    const method = schema.methods[name];\n                    target[name] = this.makeMethod(rootSchema, method, context);\n                }\n            }\n        }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */ makeMethod(schema, method, context) {\n        return (paramsOrCallback, callback)=>{\n            const params = typeof paramsOrCallback === \"function\" ? {} : paramsOrCallback;\n            callback = typeof paramsOrCallback === \"function\" ? paramsOrCallback : callback;\n            const schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n            const parameters = {\n                options: {\n                    url: schemaUrl.substring(1, schemaUrl.length - 1),\n                    method: method.httpMethod,\n                    apiVersion: method.apiVersion\n                },\n                params,\n                requiredParams: method.parameterOrder || [],\n                pathParams: this.getPathParams(method.parameters),\n                context\n            };\n            if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {\n                const mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n                parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n            }\n            if (!callback) {\n                return (0, apirequest_1.createAPIRequest)(parameters);\n            }\n            (0, apirequest_1.createAPIRequest)(parameters, callback);\n            return;\n        };\n    }\n    getPathParams(params) {\n        const pathParams = new Array();\n        if (typeof params !== \"object\") {\n            params = {};\n        }\n        Object.keys(params).forEach((key)=>{\n            if (params[key].location === \"path\") {\n                pathParams.push(key);\n            }\n        });\n        return pathParams;\n    }\n}\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */ function buildurl(input) {\n    return input ? `'${input}'`.replace(/([^:]\\/)\\/+/g, \"$1\") : \"\";\n} //# sourceMappingURL=endpoint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvZW5kcG9pbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsK0ZBQWM7QUFDM0MsTUFBTUY7SUFDRkcsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxXQUFXLENBQUM7SUFDaEM7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDREUsWUFBWUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzdDLElBQUksQ0FBQ0Msc0JBQXNCLENBQUNKLFFBQVFDLFlBQVlDLFFBQVFDO1FBQ3hELElBQUlELE9BQU9HLFNBQVMsRUFBRTtZQUNsQixJQUFLLE1BQU1DLGdCQUFnQkosT0FBT0csU0FBUyxDQUFFO2dCQUN6QyxJQUFJaEIsT0FBT2tCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNQLE9BQU9HLFNBQVMsRUFBRUMsZUFBZTtvQkFDdEUsTUFBTUksV0FBV1IsT0FBT0csU0FBUyxDQUFDQyxhQUFhO29CQUMvQyxJQUFJLENBQUNOLE1BQU0sQ0FBQ00sYUFBYSxFQUFFO3dCQUN2Qk4sTUFBTSxDQUFDTSxhQUFhLEdBQUcsQ0FBQztvQkFDNUI7b0JBQ0EsSUFBSSxDQUFDUCxXQUFXLENBQUNDLE1BQU0sQ0FBQ00sYUFBYSxFQUFFTCxZQUFZUyxVQUFVUDtnQkFDakU7WUFDSjtRQUNKO0lBQ0o7SUFDQTs7Ozs7Ozs7S0FRQyxHQUNEQyx1QkFBdUJKLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUN4RCxJQUFJRCxPQUFPUyxPQUFPLEVBQUU7WUFDaEIsSUFBSyxNQUFNQyxRQUFRVixPQUFPUyxPQUFPLENBQUU7Z0JBQy9CLElBQUl0QixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsT0FBT1MsT0FBTyxFQUFFQyxPQUFPO29CQUM1RCxNQUFNQyxTQUFTWCxPQUFPUyxPQUFPLENBQUNDLEtBQUs7b0JBQ25DWixNQUFNLENBQUNZLEtBQUssR0FBRyxJQUFJLENBQUNFLFVBQVUsQ0FBQ2IsWUFBWVksUUFBUVY7Z0JBQ3ZEO1lBQ0o7UUFDSjtJQUNKO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNEVyxXQUFXWixNQUFNLEVBQUVXLE1BQU0sRUFBRVYsT0FBTyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQ1ksa0JBQWtCQztZQUN0QixNQUFNQyxTQUFTLE9BQU9GLHFCQUFxQixhQUFhLENBQUMsSUFBSUE7WUFDN0RDLFdBQ0ksT0FBT0QscUJBQXFCLGFBQ3RCQSxtQkFDQUM7WUFDVixNQUFNRSxZQUFZQyxTQUFTakIsT0FBT2tCLE9BQU8sR0FBR2xCLE9BQU9tQixXQUFXLEdBQUdSLE9BQU9TLElBQUk7WUFDNUUsTUFBTUMsYUFBYTtnQkFDZjFCLFNBQVM7b0JBQ0wyQixLQUFLTixVQUFVTyxTQUFTLENBQUMsR0FBR1AsVUFBVVEsTUFBTSxHQUFHO29CQUMvQ2IsUUFBUUEsT0FBT2MsVUFBVTtvQkFDekJDLFlBQVlmLE9BQU9lLFVBQVU7Z0JBQ2pDO2dCQUNBWDtnQkFDQVksZ0JBQWdCaEIsT0FBT2lCLGNBQWMsSUFBSSxFQUFFO2dCQUMzQ0MsWUFBWSxJQUFJLENBQUNDLGFBQWEsQ0FBQ25CLE9BQU9VLFVBQVU7Z0JBQ2hEcEI7WUFDSjtZQUNBLElBQUlVLE9BQU9vQixXQUFXLElBQ2xCcEIsT0FBT29CLFdBQVcsQ0FBQ0MsU0FBUyxJQUM1QnJCLE9BQU9vQixXQUFXLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxJQUNuQ3RCLE9BQU9vQixXQUFXLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDYixJQUFJLEVBQUU7Z0JBQzFDLE1BQU1jLFdBQVdqQixTQUFTakIsT0FBT2tCLE9BQU8sR0FBR1AsT0FBT29CLFdBQVcsQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUNiLElBQUk7Z0JBQ25GQyxXQUFXYSxRQUFRLEdBQUdBLFNBQVNYLFNBQVMsQ0FBQyxHQUFHVyxTQUFTVixNQUFNLEdBQUc7WUFDbEU7WUFDQSxJQUFJLENBQUNWLFVBQVU7Z0JBQ1gsT0FBTyxDQUFDLEdBQUd0QixhQUFhMkMsZ0JBQWdCLEVBQUVkO1lBQzlDO1lBQ0MsSUFBRzdCLGFBQWEyQyxnQkFBZ0IsRUFBRWQsWUFBWVA7WUFDL0M7UUFDSjtJQUNKO0lBQ0FnQixjQUFjZixNQUFNLEVBQUU7UUFDbEIsTUFBTWMsYUFBYSxJQUFJTztRQUN2QixJQUFJLE9BQU9yQixXQUFXLFVBQVU7WUFDNUJBLFNBQVMsQ0FBQztRQUNkO1FBQ0E1QixPQUFPa0QsSUFBSSxDQUFDdEIsUUFBUXVCLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDeEIsSUFBSXhCLE1BQU0sQ0FBQ3dCLElBQUksQ0FBQ0MsUUFBUSxLQUFLLFFBQVE7Z0JBQ2pDWCxXQUFXWSxJQUFJLENBQUNGO1lBQ3BCO1FBQ0o7UUFDQSxPQUFPVjtJQUNYO0FBQ0o7QUFDQXhDLGdCQUFnQixHQUFHRTtBQUNuQjs7Ozs7O0NBTUMsR0FDRCxTQUFTMEIsU0FBU3lCLEtBQUs7SUFDbkIsT0FBT0EsUUFBUSxDQUFDLENBQUMsRUFBRUEsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLGdCQUFnQixRQUFRO0FBQ2hFLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvZW5kcG9pbnQuanM/NzllNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbmRwb2ludCA9IHZvaWQgMDtcbmNvbnN0IGFwaXJlcXVlc3RfMSA9IHJlcXVpcmUoXCIuL2FwaXJlcXVlc3RcIik7XG5jbGFzcyBFbmRwb2ludCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBzY2hlbWEsIGFkZCBtZXRob2RzIGFuZCByZXNvdXJjZXMgdG8gYSB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gd2hpY2ggdG8gYXBwbHkgdGhlIHNjaGVtYS5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm9vdFNjaGVtYSBUaGUgdG9wLWxldmVsIHNjaGVtYSwgc28gd2UgZG9uJ3QgbG9zZSB0cmFjayBvZiBpdFxuICAgICAqIGR1cmluZyByZWN1cnNpb24uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYSBUaGUgY3VycmVudCBzY2hlbWEgZnJvbSB3aGljaCB0byBleHRyYWN0IG1ldGhvZHMgYW5kXG4gICAgICogcmVzb3VyY2VzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGFkZCB0byBlYWNoIG1ldGhvZC5cbiAgICAgKi9cbiAgICBhcHBseVNjaGVtYSh0YXJnZXQsIHJvb3RTY2hlbWEsIHNjaGVtYSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmFwcGx5TWV0aG9kc0Zyb21TY2hlbWEodGFyZ2V0LCByb290U2NoZW1hLCBzY2hlbWEsIGNvbnRleHQpO1xuICAgICAgICBpZiAoc2NoZW1hLnJlc291cmNlcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXNvdXJjZU5hbWUgaW4gc2NoZW1hLnJlc291cmNlcykge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2NoZW1hLnJlc291cmNlcywgcmVzb3VyY2VOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZSA9IHNjaGVtYS5yZXNvdXJjZXNbcmVzb3VyY2VOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRbcmVzb3VyY2VOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Jlc291cmNlTmFtZV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5U2NoZW1hKHRhcmdldFtyZXNvdXJjZU5hbWVdLCByb290U2NoZW1hLCByZXNvdXJjZSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgc2NoZW1hLCBhZGQgbWV0aG9kcyB0byBhIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgVGhlIHRhcmdldCB0byB3aGljaCB0byBhcHBseSB0aGUgbWV0aG9kcy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm9vdFNjaGVtYSBUaGUgdG9wLWxldmVsIHNjaGVtYSwgc28gd2UgZG9uJ3QgbG9zZSB0cmFjayBvZiBpdFxuICAgICAqIGR1cmluZyByZWN1cnNpb24uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYSBUaGUgY3VycmVudCBzY2hlbWEgZnJvbSB3aGljaCB0byBleHRyYWN0IG1ldGhvZHMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gYWRkIHRvIGVhY2ggbWV0aG9kLlxuICAgICAqL1xuICAgIGFwcGx5TWV0aG9kc0Zyb21TY2hlbWEodGFyZ2V0LCByb290U2NoZW1hLCBzY2hlbWEsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHNjaGVtYS5tZXRob2RzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc2NoZW1hLm1ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNjaGVtYS5tZXRob2RzLCBuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBzY2hlbWEubWV0aG9kc1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gdGhpcy5tYWtlTWV0aG9kKHJvb3RTY2hlbWEsIG1ldGhvZCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdpdmVuIGEgbWV0aG9kIHNjaGVtYSwgYWRkIGEgbWV0aG9kIHRvIGEgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHRvIHdoaWNoIHRvIGFkZCB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSBzY2hlbWEgVGhlIHRvcC1sZXZlbCBzY2hlbWEgdGhhdCBjb250YWlucyB0aGUgcm9vdFVybCwgZXRjLlxuICAgICAqIEBwYXJhbSBtZXRob2QgVGhlIG1ldGhvZCBzY2hlbWEgZnJvbSB3aGljaCB0byBnZW5lcmF0ZSB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGFkZCB0byB0aGUgbWV0aG9kLlxuICAgICAqL1xuICAgIG1ha2VNZXRob2Qoc2NoZW1hLCBtZXRob2QsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIChwYXJhbXNPckNhbGxiYWNrLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gdHlwZW9mIHBhcmFtc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyB7fSA6IHBhcmFtc09yQ2FsbGJhY2s7XG4gICAgICAgICAgICBjYWxsYmFjayA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIHBhcmFtc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJhbXNPckNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIDogY2FsbGJhY2s7XG4gICAgICAgICAgICBjb25zdCBzY2hlbWFVcmwgPSBidWlsZHVybChzY2hlbWEucm9vdFVybCArIHNjaGVtYS5zZXJ2aWNlUGF0aCArIG1ldGhvZC5wYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjaGVtYVVybC5zdWJzdHJpbmcoMSwgc2NoZW1hVXJsLmxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZC5odHRwTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiBtZXRob2QuYXBpVmVyc2lvbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZFBhcmFtczogbWV0aG9kLnBhcmFtZXRlck9yZGVyIHx8IFtdLFxuICAgICAgICAgICAgICAgIHBhdGhQYXJhbXM6IHRoaXMuZ2V0UGF0aFBhcmFtcyhtZXRob2QucGFyYW1ldGVycyksXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobWV0aG9kLm1lZGlhVXBsb2FkICYmXG4gICAgICAgICAgICAgICAgbWV0aG9kLm1lZGlhVXBsb2FkLnByb3RvY29scyAmJlxuICAgICAgICAgICAgICAgIG1ldGhvZC5tZWRpYVVwbG9hZC5wcm90b2NvbHMuc2ltcGxlICYmXG4gICAgICAgICAgICAgICAgbWV0aG9kLm1lZGlhVXBsb2FkLnByb3RvY29scy5zaW1wbGUucGF0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhVXJsID0gYnVpbGR1cmwoc2NoZW1hLnJvb3RVcmwgKyBtZXRob2QubWVkaWFVcGxvYWQucHJvdG9jb2xzLnNpbXBsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLm1lZGlhVXJsID0gbWVkaWFVcmwuc3Vic3RyaW5nKDEsIG1lZGlhVXJsLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgYXBpcmVxdWVzdF8xLmNyZWF0ZUFQSVJlcXVlc3QpKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGFwaXJlcXVlc3RfMS5jcmVhdGVBUElSZXF1ZXN0KShwYXJhbWV0ZXJzLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFBhdGhQYXJhbXMocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHBhdGhQYXJhbXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBwYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNba2V5XS5sb2NhdGlvbiA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICAgICAgcGF0aFBhcmFtcy5wdXNoKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGF0aFBhcmFtcztcbiAgICB9XG59XG5leHBvcnRzLkVuZHBvaW50ID0gRW5kcG9pbnQ7XG4vKipcbiAqIEJ1aWxkIGEgc3RyaW5nIHVzZWQgdG8gY3JlYXRlIGEgVVJMIGZyb20gdGhlIGRpc2NvdmVyeSBkb2MgcHJvdmlkZWQgVVJMLlxuICogcmVwbGFjZSBkb3VibGUgc2xhc2hlcyB3aXRoIHNpbmdsZSBzbGFzaCAoZXhjZXB0IGluIGh0dHBzOi8vKVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAgaW5wdXQgVVJMIHRvIGJ1aWxkIGZyb21cbiAqIEByZXR1cm4gUmVzdWx0aW5nIGJ1aWx0IFVSTFxuICovXG5mdW5jdGlvbiBidWlsZHVybChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA/IGAnJHtpbnB1dH0nYC5yZXBsYWNlKC8oW146XVxcLylcXC8rL2csICckMScpIDogJyc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmRwb2ludC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFbmRwb2ludCIsImFwaXJlcXVlc3RfMSIsInJlcXVpcmUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfb3B0aW9ucyIsImFwcGx5U2NoZW1hIiwidGFyZ2V0Iiwicm9vdFNjaGVtYSIsInNjaGVtYSIsImNvbnRleHQiLCJhcHBseU1ldGhvZHNGcm9tU2NoZW1hIiwicmVzb3VyY2VzIiwicmVzb3VyY2VOYW1lIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicmVzb3VyY2UiLCJtZXRob2RzIiwibmFtZSIsIm1ldGhvZCIsIm1ha2VNZXRob2QiLCJwYXJhbXNPckNhbGxiYWNrIiwiY2FsbGJhY2siLCJwYXJhbXMiLCJzY2hlbWFVcmwiLCJidWlsZHVybCIsInJvb3RVcmwiLCJzZXJ2aWNlUGF0aCIsInBhdGgiLCJwYXJhbWV0ZXJzIiwidXJsIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiaHR0cE1ldGhvZCIsImFwaVZlcnNpb24iLCJyZXF1aXJlZFBhcmFtcyIsInBhcmFtZXRlck9yZGVyIiwicGF0aFBhcmFtcyIsImdldFBhdGhQYXJhbXMiLCJtZWRpYVVwbG9hZCIsInByb3RvY29scyIsInNpbXBsZSIsIm1lZGlhVXJsIiwiY3JlYXRlQVBJUmVxdWVzdCIsIkFycmF5Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJsb2NhdGlvbiIsInB1c2giLCJpbnB1dCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/endpoint.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/http2.js":
/*!***********************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/http2.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.closeSession = exports.request = exports.sessions = void 0;\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst qs = __webpack_require__(/*! qs */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(action-browser)/./node_modules/extend/index.js\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst common_1 = __webpack_require__(/*! gaxios/build/src/common */ \"(action-browser)/./node_modules/gaxios/build/src/common.js\");\nconst { HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_STATUS } = http2.constants;\nconst DEBUG = !!process.env.HTTP2_DEBUG;\n/**\n * List of sessions current in use.\n * @private\n */ exports.sessions = {};\n/**\n * Public method to make an http2 request.\n * @param config - Request options.\n */ async function request(config) {\n    const opts = extend(true, {}, config);\n    opts.validateStatus = opts.validateStatus || validateStatus;\n    opts.responseType = opts.responseType || \"json\";\n    const url = new url_1.URL(opts.url);\n    // Check for an existing session to this host, or go create a new one.\n    const sessionData = _getClient(url.host);\n    // Since we're using this session, clear the timeout handle to ensure\n    // it stays in memory and connected for a while further.\n    if (sessionData.timeoutHandle !== undefined) {\n        clearTimeout(sessionData.timeoutHandle);\n    }\n    // Assemble the querystring based on config.params.  We're using the\n    // `qs` module to make life a little easier.\n    let pathWithQs = url.pathname;\n    if (config.params && Object.keys(config.params).length > 0) {\n        const serializer = config.paramsSerializer || qs.stringify;\n        const q = serializer(opts.params);\n        pathWithQs += `?${q}`;\n    }\n    // Assemble the headers based on basic HTTP2 primitives (path, method) and\n    // custom headers sent from the consumer.  Note: I am using `Object.assign`\n    // here making the assumption these objects are not deep.  If it turns out\n    // they are, we may need to use the `extend` npm module for deep cloning.\n    const headers = Object.assign({}, opts.headers, {\n        [HTTP2_HEADER_PATH]: pathWithQs,\n        [HTTP2_HEADER_METHOD]: config.method || \"GET\"\n    });\n    // NOTE: This is working around an upstream bug in `apirequest.ts`. The\n    // request path assumes that the `content-type` header is going to be set in\n    // the underlying HTTP Client. This hack provides bug for bug compatability\n    // with this bug in gaxios:\n    // https://github.com/googleapis/gaxios/blob/main/src/gaxios.ts#L202\n    if (!headers[HTTP2_HEADER_CONTENT_TYPE]) {\n        if (opts.responseType !== \"text\") {\n            headers[HTTP2_HEADER_CONTENT_TYPE] = \"application/json\";\n        }\n    }\n    const res = {\n        config,\n        request: {},\n        headers: [],\n        status: 0,\n        data: {},\n        statusText: \"\"\n    };\n    const chunks = [];\n    const session = sessionData.session;\n    let req;\n    return new Promise((resolve, reject)=>{\n        try {\n            req = session.request(headers).on(\"response\", (headers)=>{\n                res.headers = headers;\n                res.status = Number(headers[HTTP2_HEADER_STATUS]);\n                let stream = req;\n                if (headers[HTTP2_HEADER_CONTENT_ENCODING] === \"gzip\") {\n                    stream = req.pipe(zlib.createGunzip());\n                }\n                if (opts.responseType === \"stream\") {\n                    res.data = stream;\n                    resolve(res);\n                    return;\n                }\n                stream.on(\"data\", (d)=>{\n                    chunks.push(d);\n                }).on(\"error\", (err)=>{\n                    reject(err);\n                    return;\n                }).on(\"end\", ()=>{\n                    const buf = Buffer.concat(chunks);\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    let data = buf;\n                    if (buf) {\n                        if (opts.responseType === \"json\") {\n                            try {\n                                data = JSON.parse(buf.toString(\"utf8\"));\n                            } catch (_a) {\n                                data = buf.toString(\"utf8\");\n                            }\n                        } else if (opts.responseType === \"text\") {\n                            data = buf.toString(\"utf8\");\n                        } else if (opts.responseType === \"arraybuffer\") {\n                            data = buf.buffer;\n                        }\n                        res.data = data;\n                    }\n                    if (!opts.validateStatus(res.status)) {\n                        let message = `Request failed with status code ${res.status}. `;\n                        if (res.data && typeof res.data === \"object\") {\n                            const body = util.inspect(res.data, {\n                                depth: 5\n                            });\n                            message = `${message}\\n'${body}`;\n                        }\n                        reject(new common_1.GaxiosError(message, opts, res));\n                    }\n                    resolve(res);\n                    return;\n                });\n            }).on(\"error\", (e)=>{\n                reject(e);\n                return;\n            });\n        } catch (e) {\n            closeSession(url);\n            reject(e);\n        }\n        res.request = req;\n        // If data was provided, write it to the request in the form of\n        // a stream, string data, or a basic object.\n        if (config.data) {\n            if (config.data instanceof stream_1.Stream) {\n                config.data.pipe(req);\n            } else if (typeof config.data === \"string\") {\n                const data = Buffer.from(config.data);\n                req.end(data);\n            } else if (typeof config.data === \"object\") {\n                const data = JSON.stringify(config.data);\n                req.end(data);\n            }\n        }\n        // Create a timeout so the Http2Session will be cleaned up after\n        // a period of non-use. 500 milliseconds was chosen because it's\n        // a nice round number, and I don't know what would be a better\n        // choice. Keeping this channel open will hold a file descriptor\n        // which will prevent the process from exiting.\n        sessionData.timeoutHandle = setTimeout(()=>{\n            closeSession(url);\n        }, 500);\n    });\n}\nexports.request = request;\n/**\n * By default, throw for any non-2xx status code\n * @param status - status code from the HTTP response\n */ function validateStatus(status) {\n    return status >= 200 && status < 300;\n}\n/**\n * Obtain an existing h2 session or go create a new one.\n * @param host - The hostname to which the session belongs.\n */ function _getClient(host) {\n    if (!exports.sessions[host]) {\n        if (DEBUG) {\n            console.log(`Creating client for ${host}`);\n        }\n        const session = http2.connect(`https://${host}`);\n        session.on(\"error\", (e)=>{\n            console.error(`*ERROR*: ${e}`);\n            delete exports.sessions[host];\n        }).on(\"goaway\", (errorCode, lastStreamId)=>{\n            console.error(`*GOAWAY*: ${errorCode} : ${lastStreamId}`);\n            delete exports.sessions[host];\n        });\n        exports.sessions[host] = {\n            session\n        };\n    } else {\n        if (DEBUG) {\n            console.log(`Used cached client for ${host}`);\n        }\n    }\n    return exports.sessions[host];\n}\nasync function closeSession(url) {\n    const sessionData = exports.sessions[url.host];\n    if (!sessionData) {\n        return;\n    }\n    const { session } = sessionData;\n    delete exports.sessions[url.host];\n    if (DEBUG) {\n        console.error(`Closing ${url.host}`);\n    }\n    session.close(()=>{\n        if (DEBUG) {\n            console.error(`Closed ${url.host}`);\n        }\n    });\n    setTimeout(()=>{\n        if (session && !session.destroyed) {\n            if (DEBUG) {\n                console.log(`Forcing close ${url.host}`);\n            }\n            if (session) {\n                session.destroy();\n            }\n        }\n    }, 1000);\n}\nexports.closeSession = closeSession; //# sourceMappingURL=http2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/http2.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Endpoint = exports.Discovery = exports.AuthPlus = exports.createAPIRequest = exports.getAPI = exports.GaxiosError = exports.Gaxios = exports.AwsClient = exports.IdentityPoolClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.GoogleAuth = exports.DefaultTransporter = exports.UserRefreshClient = exports.Compute = exports.JWT = exports.OAuth2Client = void 0;\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(action-browser)/./node_modules/google-auth-library/build/src/index.js\");\nObject.defineProperty(exports, \"OAuth2Client\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.OAuth2Client;\n    }\n}));\nObject.defineProperty(exports, \"JWT\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.JWT;\n    }\n}));\nObject.defineProperty(exports, \"Compute\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.Compute;\n    }\n}));\nObject.defineProperty(exports, \"UserRefreshClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.UserRefreshClient;\n    }\n}));\nObject.defineProperty(exports, \"DefaultTransporter\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.DefaultTransporter;\n    }\n}));\nObject.defineProperty(exports, \"GoogleAuth\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.GoogleAuth;\n    }\n}));\nObject.defineProperty(exports, \"ExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.ExternalAccountClient;\n    }\n}));\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.BaseExternalAccountClient;\n    }\n}));\nObject.defineProperty(exports, \"IdentityPoolClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.IdentityPoolClient;\n    }\n}));\nObject.defineProperty(exports, \"AwsClient\", ({\n    enumerable: true,\n    get: function() {\n        return google_auth_library_1.AwsClient;\n    }\n}));\nvar gaxios_1 = __webpack_require__(/*! gaxios */ \"(action-browser)/./node_modules/gaxios/build/src/index.js\");\nObject.defineProperty(exports, \"Gaxios\", ({\n    enumerable: true,\n    get: function() {\n        return gaxios_1.Gaxios;\n    }\n}));\nObject.defineProperty(exports, \"GaxiosError\", ({\n    enumerable: true,\n    get: function() {\n        return gaxios_1.GaxiosError;\n    }\n}));\nvar apiIndex_1 = __webpack_require__(/*! ./apiIndex */ \"(action-browser)/./node_modules/googleapis-common/build/src/apiIndex.js\");\nObject.defineProperty(exports, \"getAPI\", ({\n    enumerable: true,\n    get: function() {\n        return apiIndex_1.getAPI;\n    }\n}));\nvar apirequest_1 = __webpack_require__(/*! ./apirequest */ \"(action-browser)/./node_modules/googleapis-common/build/src/apirequest.js\");\nObject.defineProperty(exports, \"createAPIRequest\", ({\n    enumerable: true,\n    get: function() {\n        return apirequest_1.createAPIRequest;\n    }\n}));\nvar authplus_1 = __webpack_require__(/*! ./authplus */ \"(action-browser)/./node_modules/googleapis-common/build/src/authplus.js\");\nObject.defineProperty(exports, \"AuthPlus\", ({\n    enumerable: true,\n    get: function() {\n        return authplus_1.AuthPlus;\n    }\n}));\nvar discovery_1 = __webpack_require__(/*! ./discovery */ \"(action-browser)/./node_modules/googleapis-common/build/src/discovery.js\");\nObject.defineProperty(exports, \"Discovery\", ({\n    enumerable: true,\n    get: function() {\n        return discovery_1.Discovery;\n    }\n}));\nvar endpoint_1 = __webpack_require__(/*! ./endpoint */ \"(action-browser)/./node_modules/googleapis-common/build/src/endpoint.js\");\nObject.defineProperty(exports, \"Endpoint\", ({\n    enumerable: true,\n    get: function() {\n        return endpoint_1.Endpoint;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGdEQUFnRDtBQUNoRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHdCQUF3QixHQUFHQSxjQUFjLEdBQUdBLG1CQUFtQixHQUFHQSxjQUFjLEdBQUdBLGlCQUFpQixHQUFHQSwwQkFBMEIsR0FBR0EsaUNBQWlDLEdBQUdBLDZCQUE2QixHQUFHQSxrQkFBa0IsR0FBR0EsMEJBQTBCLEdBQUdBLHlCQUF5QixHQUFHQSxlQUFlLEdBQUdBLFdBQVcsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUM1WSxJQUFJbUIsd0JBQXdCQyxtQkFBT0EsQ0FBQyxtR0FBcUI7QUFDekR0QixnREFBK0M7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQkQsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JJcEIsdUNBQXNDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxzQkFBc0JGLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNuSG5CLDJDQUEwQztJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsc0JBQXNCSCxPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0hsQixxREFBb0Q7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQkosaUJBQWlCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDL0lqQixzREFBcUQ7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQkwsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakpoQiw4Q0FBNkM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQk4sVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pJZix5REFBd0Q7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQlAscUJBQXFCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkpkLDZEQUE0RDtJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsc0JBQXNCUix5QkFBeUI7SUFBRTtBQUFFLENBQUMsRUFBQztBQUMvSmIsc0RBQXFEO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxzQkFBc0JULGtCQUFrQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pKWiw2Q0FBNEM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILHNCQUFzQlYsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9ILElBQUljLFdBQVdILG1CQUFPQSxDQUFDLHlFQUFRO0FBQy9CdEIsMENBQXlDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxTQUFTZixNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDNUdWLCtDQUE4QztJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsU0FBU2hCLFdBQVc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SCxJQUFJaUIsYUFBYUosbUJBQU9BLENBQUMsMkZBQVk7QUFDckN0QiwwQ0FBeUM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFdBQVdsQixNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUcsSUFBSW1CLGVBQWVMLG1CQUFPQSxDQUFDLCtGQUFjO0FBQ3pDdEIsb0RBQW1EO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxhQUFhcEIsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEksSUFBSXFCLGFBQWFOLG1CQUFPQSxDQUFDLDJGQUFZO0FBQ3JDdEIsNENBQTJDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSSxXQUFXdEIsUUFBUTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUl1QixjQUFjUCxtQkFBT0EsQ0FBQyw2RkFBYTtBQUN2Q3RCLDZDQUE0QztJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssWUFBWXhCLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySCxJQUFJeUIsYUFBYVIsbUJBQU9BLENBQUMsMkZBQVk7QUFDckN0Qiw0Q0FBMkM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9NLFdBQVcxQixRQUFRO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDbEgsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvaW5kZXguanM/NGQwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbmRwb2ludCA9IGV4cG9ydHMuRGlzY292ZXJ5ID0gZXhwb3J0cy5BdXRoUGx1cyA9IGV4cG9ydHMuY3JlYXRlQVBJUmVxdWVzdCA9IGV4cG9ydHMuZ2V0QVBJID0gZXhwb3J0cy5HYXhpb3NFcnJvciA9IGV4cG9ydHMuR2F4aW9zID0gZXhwb3J0cy5Bd3NDbGllbnQgPSBleHBvcnRzLklkZW50aXR5UG9vbENsaWVudCA9IGV4cG9ydHMuQmFzZUV4dGVybmFsQWNjb3VudENsaWVudCA9IGV4cG9ydHMuRXh0ZXJuYWxBY2NvdW50Q2xpZW50ID0gZXhwb3J0cy5Hb29nbGVBdXRoID0gZXhwb3J0cy5EZWZhdWx0VHJhbnNwb3J0ZXIgPSBleHBvcnRzLlVzZXJSZWZyZXNoQ2xpZW50ID0gZXhwb3J0cy5Db21wdXRlID0gZXhwb3J0cy5KV1QgPSBleHBvcnRzLk9BdXRoMkNsaWVudCA9IHZvaWQgMDtcbnZhciBnb29nbGVfYXV0aF9saWJyYXJ5XzEgPSByZXF1aXJlKFwiZ29vZ2xlLWF1dGgtbGlicmFyeVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9BdXRoMkNsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLk9BdXRoMkNsaWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkpXVFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkpXVDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbXB1dGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Db21wdXRlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVXNlclJlZnJlc2hDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Vc2VyUmVmcmVzaENsaWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlZmF1bHRUcmFuc3BvcnRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkRlZmF1bHRUcmFuc3BvcnRlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdvb2dsZUF1dGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Hb29nbGVBdXRoOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXh0ZXJuYWxBY2NvdW50Q2xpZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnb29nbGVfYXV0aF9saWJyYXJ5XzEuRXh0ZXJuYWxBY2NvdW50Q2xpZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQmFzZUV4dGVybmFsQWNjb3VudENsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ29vZ2xlX2F1dGhfbGlicmFyeV8xLkJhc2VFeHRlcm5hbEFjY291bnRDbGllbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJZGVudGl0eVBvb2xDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5JZGVudGl0eVBvb2xDbGllbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBd3NDbGllbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdvb2dsZV9hdXRoX2xpYnJhcnlfMS5Bd3NDbGllbnQ7IH0gfSk7XG52YXIgZ2F4aW9zXzEgPSByZXF1aXJlKFwiZ2F4aW9zXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiR2F4aW9zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBnYXhpb3NfMS5HYXhpb3M7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJHYXhpb3NFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2F4aW9zXzEuR2F4aW9zRXJyb3I7IH0gfSk7XG52YXIgYXBpSW5kZXhfMSA9IHJlcXVpcmUoXCIuL2FwaUluZGV4XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0QVBJXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhcGlJbmRleF8xLmdldEFQSTsgfSB9KTtcbnZhciBhcGlyZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9hcGlyZXF1ZXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlQVBJUmVxdWVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBpcmVxdWVzdF8xLmNyZWF0ZUFQSVJlcXVlc3Q7IH0gfSk7XG52YXIgYXV0aHBsdXNfMSA9IHJlcXVpcmUoXCIuL2F1dGhwbHVzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXV0aFBsdXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1dGhwbHVzXzEuQXV0aFBsdXM7IH0gfSk7XG52YXIgZGlzY292ZXJ5XzEgPSByZXF1aXJlKFwiLi9kaXNjb3ZlcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXNjb3ZlcnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc2NvdmVyeV8xLkRpc2NvdmVyeTsgfSB9KTtcbnZhciBlbmRwb2ludF8xID0gcmVxdWlyZShcIi4vZW5kcG9pbnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbmRwb2ludFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5kcG9pbnRfMS5FbmRwb2ludDsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkVuZHBvaW50IiwiRGlzY292ZXJ5IiwiQXV0aFBsdXMiLCJjcmVhdGVBUElSZXF1ZXN0IiwiZ2V0QVBJIiwiR2F4aW9zRXJyb3IiLCJHYXhpb3MiLCJBd3NDbGllbnQiLCJJZGVudGl0eVBvb2xDbGllbnQiLCJCYXNlRXh0ZXJuYWxBY2NvdW50Q2xpZW50IiwiRXh0ZXJuYWxBY2NvdW50Q2xpZW50IiwiR29vZ2xlQXV0aCIsIkRlZmF1bHRUcmFuc3BvcnRlciIsIlVzZXJSZWZyZXNoQ2xpZW50IiwiQ29tcHV0ZSIsIkpXVCIsIk9BdXRoMkNsaWVudCIsImdvb2dsZV9hdXRoX2xpYnJhcnlfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2F4aW9zXzEiLCJhcGlJbmRleF8xIiwiYXBpcmVxdWVzdF8xIiwiYXV0aHBsdXNfMSIsImRpc2NvdmVyeV8xIiwiZW5kcG9pbnRfMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/build/src/isbrowser.js":
/*!***************************************************************!*\
  !*** ./node_modules/googleapis-common/build/src/isbrowser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = void 0;\nfunction isBrowser() {\n    return \"undefined\" !== \"undefined\";\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=isbrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9idWlsZC9zcmMvaXNicm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixnREFBZ0Q7QUFDaEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLFNBQVNFO0lBQ0wsT0FBTyxnQkFBa0I7QUFDN0I7QUFDQUYsaUJBQWlCLEdBQUdFLFdBQ3BCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vYnVpbGQvc3JjL2lzYnJvd3Nlci5qcz9mZTUzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzYnJvd3Nlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jyb3dzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/build/src/isbrowser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/formats.js":
/*!***********************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/qs/lib/formats.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\nvar Format = {\n    RFC1738: \"RFC1738\",\n    RFC3986: \"RFC3986\"\n};\nmodule.exports = {\n    \"default\": Format.RFC3986,\n    formatters: {\n        RFC1738: function(value) {\n            return replace.call(value, percentTwenties, \"+\");\n        },\n        RFC3986: function(value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxPQUFPQyxTQUFTLENBQUNGLE9BQU87QUFDdEMsSUFBSUcsa0JBQWtCO0FBRXRCLElBQUlDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxTQUFTO0FBQ2I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2IsV0FBV0osT0FBT0UsT0FBTztJQUN6QkcsWUFBWTtRQUNSSixTQUFTLFNBQVVLLEtBQUs7WUFDcEIsT0FBT1YsUUFBUVcsSUFBSSxDQUFDRCxPQUFPUCxpQkFBaUI7UUFDaEQ7UUFDQUcsU0FBUyxTQUFVSSxLQUFLO1lBQ3BCLE9BQU9ULE9BQU9TO1FBQ2xCO0lBQ0o7SUFDQUwsU0FBU0QsT0FBT0MsT0FBTztJQUN2QkMsU0FBU0YsT0FBT0UsT0FBTztBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzP2YyYTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiJdLCJuYW1lcyI6WyJyZXBsYWNlIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicGVyY2VudFR3ZW50aWVzIiwiRm9ybWF0IiwiUkZDMTczOCIsIlJGQzM5ODYiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0dGVycyIsInZhbHVlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/formats.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/qs/lib/index.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar stringify = __webpack_require__(/*! ./stringify */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/stringify.js\");\nvar parse = __webpack_require__(/*! ./parse */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/parse.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/formats.js\");\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUM7QUFFdEJHLE9BQU9DLE9BQU8sR0FBRztJQUNiRixTQUFTQTtJQUNURCxPQUFPQTtJQUNQRixXQUFXQTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzPzM0YmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIl0sIm5hbWVzIjpbInN0cmluZ2lmeSIsInJlcXVpcmUiLCJwYXJzZSIsImZvcm1hdHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/parse.js":
/*!*********************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/qs/lib/parse.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/utils.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar defaults = {\n    allowDots: false,\n    allowEmptyArrays: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    comma: false,\n    decodeDotInKeys: false,\n    decoder: utils.decode,\n    delimiter: \"&\",\n    depth: 5,\n    duplicates: \"combine\",\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictDepth: false,\n    strictNullHandling: false,\n    throwOnLimitExceeded: false\n};\nvar interpretNumericEntities = function(str) {\n    return str.replace(/&#(\\d+);/g, function($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\nvar parseArrayValue = function(val, options, currentArrayLength) {\n    if (val && typeof val === \"string\" && options.comma && val.indexOf(\",\") > -1) {\n        return val.split(\",\");\n    }\n    if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {\n        throw new RangeError(\"Array limit exceeded. Only \" + options.arrayLimit + \" element\" + (options.arrayLimit === 1 ? \"\" : \"s\") + \" allowed in an array.\");\n    }\n    return val;\n};\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = \"utf8=%26%2310003%3B\"; // encodeURIComponent('&#10003;')\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = \"utf8=%E2%9C%93\"; // encodeURIComponent('✓')\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {\n        __proto__: null\n    };\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, \"\") : str;\n    cleanStr = cleanStr.replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, options.throwOnLimitExceeded ? limit + 1 : limit);\n    if (options.throwOnLimitExceeded && parts.length > limit) {\n        throw new RangeError(\"Parameter limit exceeded. Only \" + limit + \" parameter\" + (limit === 1 ? \"\" : \"s\") + \" allowed.\");\n    }\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for(i = 0; i < parts.length; ++i){\n            if (parts[i].indexOf(\"utf8=\") === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = \"utf-8\";\n                } else if (parts[i] === isoSentinel) {\n                    charset = \"iso-8859-1\";\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n    for(i = 0; i < parts.length; ++i){\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n        var bracketEqualsPos = part.indexOf(\"]=\");\n        var pos = bracketEqualsPos === -1 ? part.indexOf(\"=\") : bracketEqualsPos + 1;\n        var key;\n        var val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, \"key\");\n            val = options.strictNullHandling ? null : \"\";\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, \"key\");\n            val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options, isArray(obj[key]) ? obj[key].length : 0), function(encodedVal) {\n                return options.decoder(encodedVal, defaults.decoder, charset, \"value\");\n            });\n        }\n        if (val && options.interpretNumericEntities && charset === \"iso-8859-1\") {\n            val = interpretNumericEntities(String(val));\n        }\n        if (part.indexOf(\"[]=\") > -1) {\n            val = isArray(val) ? [\n                val\n            ] : val;\n        }\n        var existing = has.call(obj, key);\n        if (existing && options.duplicates === \"combine\") {\n            obj[key] = utils.combine(obj[key], val);\n        } else if (!existing || options.duplicates === \"last\") {\n            obj[key] = val;\n        }\n    }\n    return obj;\n};\nvar parseObject = function(chain, val, options, valuesParsed) {\n    var currentArrayLength = 0;\n    if (chain.length > 0 && chain[chain.length - 1] === \"[]\") {\n        var parentKey = chain.slice(0, -1).join(\"\");\n        currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;\n    }\n    var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);\n    for(var i = chain.length - 1; i >= 0; --i){\n        var obj;\n        var root = chain[i];\n        if (root === \"[]\" && options.parseArrays) {\n            obj = options.allowEmptyArrays && (leaf === \"\" || options.strictNullHandling && leaf === null) ? [] : utils.combine([], leaf);\n        } else {\n            obj = options.plainObjects ? {\n                __proto__: null\n            } : {};\n            var cleanRoot = root.charAt(0) === \"[\" && root.charAt(root.length - 1) === \"]\" ? root.slice(1, -1) : root;\n            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, \".\") : cleanRoot;\n            var index = parseInt(decodedRoot, 10);\n            if (!options.parseArrays && decodedRoot === \"\") {\n                obj = {\n                    0: leaf\n                };\n            } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (decodedRoot !== \"__proto__\") {\n                obj[decodedRoot] = leaf;\n            }\n        }\n        leaf = obj;\n    }\n    return leaf;\n};\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, \"[$1]\") : givenKey;\n    // The regex chunks\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n    // Get the parent\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n    // Stash the parent if it exists\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(parent);\n    }\n    // Loop through children appending to the array until we hit depth\n    var i = 0;\n    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n    // If there's a remainder, check strictDepth option for throw, else just add whatever is left\n    if (segment) {\n        if (options.strictDepth === true) {\n            throw new RangeError(\"Input depth exceeded depth option of \" + options.depth + \" and strictDepth is true\");\n        }\n        keys.push(\"[\" + key.slice(segment.index) + \"]\");\n    }\n    return parseObject(keys, val, options, valuesParsed);\n};\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (typeof opts.allowEmptyArrays !== \"undefined\" && typeof opts.allowEmptyArrays !== \"boolean\") {\n        throw new TypeError(\"`allowEmptyArrays` option can only be `true` or `false`, when provided\");\n    }\n    if (typeof opts.decodeDotInKeys !== \"undefined\" && typeof opts.decodeDotInKeys !== \"boolean\") {\n        throw new TypeError(\"`decodeDotInKeys` option can only be `true` or `false`, when provided\");\n    }\n    if (opts.decoder !== null && typeof opts.decoder !== \"undefined\" && typeof opts.decoder !== \"function\") {\n        throw new TypeError(\"Decoder has to be a function.\");\n    }\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    if (typeof opts.throwOnLimitExceeded !== \"undefined\" && typeof opts.throwOnLimitExceeded !== \"boolean\") {\n        throw new TypeError(\"`throwOnLimitExceeded` option must be a boolean\");\n    }\n    var charset = typeof opts.charset === \"undefined\" ? defaults.charset : opts.charset;\n    var duplicates = typeof opts.duplicates === \"undefined\" ? defaults.duplicates : opts.duplicates;\n    if (duplicates !== \"combine\" && duplicates !== \"first\" && duplicates !== \"last\") {\n        throw new TypeError(\"The duplicates option must be either combine, first, or last\");\n    }\n    var allowDots = typeof opts.allowDots === \"undefined\" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n    return {\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === \"boolean\" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        allowPrototypes: typeof opts.allowPrototypes === \"boolean\" ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === \"boolean\" ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === \"number\" ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === \"boolean\" ? opts.comma : defaults.comma,\n        decodeDotInKeys: typeof opts.decodeDotInKeys === \"boolean\" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n        decoder: typeof opts.decoder === \"function\" ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === \"string\" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: typeof opts.depth === \"number\" || opts.depth === false ? +opts.depth : defaults.depth,\n        duplicates: duplicates,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === \"boolean\" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === \"number\" ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === \"boolean\" ? opts.plainObjects : defaults.plainObjects,\n        strictDepth: typeof opts.strictDepth === \"boolean\" ? !!opts.strictDepth : defaults.strictDepth,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling,\n        throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === \"boolean\" ? opts.throwOnLimitExceeded : false\n    };\n};\nmodule.exports = function(str, opts) {\n    var options = normalizeParseOptions(opts);\n    if (str === \"\" || str === null || typeof str === \"undefined\") {\n        return options.plainObjects ? {\n            __proto__: null\n        } : {};\n    }\n    var tempObj = typeof str === \"string\" ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? {\n        __proto__: null\n    } : {};\n    // Iterate over the keys and setup the new object\n    var keys = Object.keys(tempObj);\n    for(var i = 0; i < keys.length; ++i){\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === \"string\");\n        obj = utils.merge(obj, newObj, options);\n    }\n    if (options.allowSparse === true) {\n        return obj;\n    }\n    return utils.compact(obj);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/parse.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/stringify.js":
/*!*************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/qs/lib/stringify.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar getSideChannel = __webpack_require__(/*! side-channel */ \"(action-browser)/./node_modules/side-channel/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/utils.js\");\nvar formats = __webpack_require__(/*! ./formats */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + \"[]\";\n    },\n    comma: \"comma\",\n    indices: function indices(prefix, key) {\n        return prefix + \"[\" + key + \"]\";\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\nvar isArray = Array.isArray;\nvar push = Array.prototype.push;\nvar pushToArray = function(arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [\n        valueOrArray\n    ]);\n};\nvar toISO = Date.prototype.toISOString;\nvar defaultFormat = formats[\"default\"];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: \"indices\",\n    charset: \"utf-8\",\n    charsetSentinel: false,\n    commaRoundTrip: false,\n    delimiter: \"&\",\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    filter: void undefined,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || typeof v === \"symbol\" || typeof v === \"bigint\";\n};\nvar sentinel = {};\nvar stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    var obj = object;\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag){\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== \"undefined\") {\n            if (pos === step) {\n                throw new RangeError(\"Cyclic object value\");\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === \"undefined\") {\n            step = 0;\n        }\n    }\n    if (typeof filter === \"function\") {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        obj = utils.maybeMap(obj, function(value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, \"key\", format) : prefix;\n        }\n        obj = \"\";\n    }\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, \"key\", format);\n            return [\n                formatter(keyValue) + \"=\" + formatter(encoder(obj, defaults.encoder, charset, \"value\", format))\n            ];\n        }\n        return [\n            formatter(prefix) + \"=\" + formatter(String(obj))\n        ];\n    }\n    var values = [];\n    if (typeof obj === \"undefined\") {\n        return values;\n    }\n    var objKeys;\n    if (generateArrayPrefix === \"comma\" && isArray(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            obj = utils.maybeMap(obj, encoder);\n        }\n        objKeys = [\n            {\n                value: obj.length > 0 ? obj.join(\",\") || null : void undefined\n            }\n        ];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n    var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\\./g, \"%2E\") : String(prefix);\n    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + \"[]\" : encodedPrefix;\n    if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n        return adjustedPrefix + \"[]\";\n    }\n    for(var j = 0; j < objKeys.length; ++j){\n        var key = objKeys[j];\n        var value = typeof key === \"object\" && key && typeof key.value !== \"undefined\" ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\\./g, \"%2E\") : String(key);\n        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === \"function\" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? \".\" + encodedKey : \"[\" + encodedKey + \"]\");\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, generateArrayPrefix === \"comma\" && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n};\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n    if (typeof opts.allowEmptyArrays !== \"undefined\" && typeof opts.allowEmptyArrays !== \"boolean\") {\n        throw new TypeError(\"`allowEmptyArrays` option can only be `true` or `false`, when provided\");\n    }\n    if (typeof opts.encodeDotInKeys !== \"undefined\" && typeof opts.encodeDotInKeys !== \"boolean\") {\n        throw new TypeError(\"`encodeDotInKeys` option can only be `true` or `false`, when provided\");\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== \"undefined\" && typeof opts.encoder !== \"function\") {\n        throw new TypeError(\"Encoder has to be a function.\");\n    }\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== \"undefined\" && opts.charset !== \"utf-8\" && opts.charset !== \"iso-8859-1\") {\n        throw new TypeError(\"The charset option must be either utf-8, iso-8859-1, or undefined\");\n    }\n    var format = formats[\"default\"];\n    if (typeof opts.format !== \"undefined\") {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError(\"Unknown format option provided.\");\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n    var filter = defaults.filter;\n    if (typeof opts.filter === \"function\" || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n    var arrayFormat;\n    if (opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (\"indices\" in opts) {\n        arrayFormat = opts.indices ? \"indices\" : \"repeat\";\n    } else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if (\"commaRoundTrip\" in opts && typeof opts.commaRoundTrip !== \"boolean\") {\n        throw new TypeError(\"`commaRoundTrip` must be a boolean, or absent\");\n    }\n    var allowDots = typeof opts.allowDots === \"undefined\" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === \"boolean\" ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === \"boolean\" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === \"boolean\" ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === \"undefined\" ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === \"boolean\" ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === \"boolean\" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === \"function\" ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === \"boolean\" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === \"function\" ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === \"boolean\" ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === \"function\" ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === \"boolean\" ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\nmodule.exports = function(object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n    var objKeys;\n    var filter;\n    if (typeof options.filter === \"function\") {\n        filter = options.filter;\n        obj = filter(\"\", obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n    var keys = [];\n    if (typeof obj !== \"object\" || obj === null) {\n        return \"\";\n    }\n    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n    var commaRoundTrip = generateArrayPrefix === \"comma\" && options.commaRoundTrip;\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n    var sideChannel = getSideChannel();\n    for(var i = 0; i < objKeys.length; ++i){\n        var key = objKeys[i];\n        var value = obj[key];\n        if (options.skipNulls && value === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(value, key, generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? \"?\" : \"\";\n    if (options.charsetSentinel) {\n        if (options.charset === \"iso-8859-1\") {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += \"utf8=%26%2310003%3B&\";\n        } else {\n            // encodeURIComponent('✓')\n            prefix += \"utf8=%E2%9C%93&\";\n        }\n    }\n    return joined.length > 0 ? prefix + joined : \"\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/stringify.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/qs/lib/utils.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar formats = __webpack_require__(/*! ./formats */ \"(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/formats.js\");\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\nvar hexTable = function() {\n    var array = [];\n    for(var i = 0; i < 256; ++i){\n        array.push(\"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase());\n    }\n    return array;\n}();\nvar compactQueue = function compactQueue(queue) {\n    while(queue.length > 1){\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n        if (isArray(obj)) {\n            var compacted = [];\n            for(var j = 0; j < obj.length; ++j){\n                if (typeof obj[j] !== \"undefined\") {\n                    compacted.push(obj[j]);\n                }\n            }\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? {\n        __proto__: null\n    } : {};\n    for(var i = 0; i < source.length; ++i){\n        if (typeof source[i] !== \"undefined\") {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n};\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */ if (!source) {\n        return target;\n    }\n    if (typeof source !== \"object\" && typeof source !== \"function\") {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === \"object\") {\n            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [\n                target,\n                source\n            ];\n        }\n        return target;\n    }\n    if (!target || typeof target !== \"object\") {\n        return [\n            target\n        ].concat(source);\n    }\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function(item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === \"object\" && item && typeof item === \"object\") {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function(acc, key) {\n        var value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function(acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\nvar decode = function(str, defaultDecoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, \" \");\n    if (charset === \"iso-8859-1\") {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\nvar limit = 1024;\n/* eslint operator-linebreak: [2, \"before\"] */ var encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    var string = str;\n    if (typeof str === \"symbol\") {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== \"string\") {\n        string = String(str);\n    }\n    if (charset === \"iso-8859-1\") {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n            return \"%26%23\" + parseInt($0.slice(2), 16) + \"%3B\";\n        });\n    }\n    var out = \"\";\n    for(var j = 0; j < string.length; j += limit){\n        var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        var arr = [];\n        for(var i = 0; i < segment.length; ++i){\n            var c = segment.charCodeAt(i);\n            if (c === 0x2D // -\n             || c === 0x2E // .\n             || c === 0x5F // _\n             || c === 0x7E // ~\n             || c >= 0x30 && c <= 0x39 // 0-9\n             || c >= 0x41 && c <= 0x5A // a-z\n             || c >= 0x61 && c <= 0x7A // A-Z\n             || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hexTable[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F];\n                continue;\n            }\n            if (c < 0xD800 || c >= 0xE000) {\n                arr[arr.length] = hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + ((c & 0x3FF) << 10 | segment.charCodeAt(i) & 0x3FF);\n            arr[arr.length] = hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n        }\n        out += arr.join(\"\");\n    }\n    return out;\n};\nvar compact = function compact(value) {\n    var queue = [\n        {\n            obj: {\n                o: value\n            },\n            prop: \"o\"\n        }\n    ];\n    var refs = [];\n    for(var i = 0; i < queue.length; ++i){\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n        var keys = Object.keys(obj);\n        for(var j = 0; j < keys.length; ++j){\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === \"object\" && val !== null && refs.indexOf(val) === -1) {\n                queue.push({\n                    obj: obj,\n                    prop: key\n                });\n                refs.push(val);\n            }\n        }\n    }\n    compactQueue(queue);\n    return value;\n};\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n};\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for(var i = 0; i < val.length; i += 1){\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/qs/lib/utils.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QztBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ1E7QUFDRTtBQUNFO0FBQ1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvaW5kZXguanM/MGU1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIHYxIH0gZnJvbSAnLi92MS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHYzIH0gZnJvbSAnLi92My5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY0IH0gZnJvbSAnLi92NC5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHY1IH0gZnJvbSAnLi92NS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5JTCB9IGZyb20gJy4vbmlsLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHZhbGlkYXRlIH0gZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcGFyc2UgfSBmcm9tICcuL3BhcnNlLmpzJzsiXSwibmFtZXMiOlsiZGVmYXVsdCIsInYxIiwidjMiLCJ2NCIsInY1IiwiTklMIiwidmVyc2lvbiIsInZhbGlkYXRlIiwic3RyaW5naWZ5IiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/md5.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/md5.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction md5(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n    }\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21kNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFFNUIsU0FBU0MsSUFBSUMsS0FBSztJQUNoQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLFFBQVE7UUFDeEJBLFFBQVFHLE9BQU9DLElBQUksQ0FBQ0o7SUFDdEIsT0FBTyxJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUNwQ0EsUUFBUUcsT0FBT0MsSUFBSSxDQUFDSixPQUFPO0lBQzdCO0lBRUEsT0FBT0Ysd0RBQWlCLENBQUMsT0FBT1EsTUFBTSxDQUFDTixPQUFPTyxNQUFNO0FBQ3REO0FBRUEsaUVBQWVSLEdBQUdBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzPzkzZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZShieXRlcykuZGlnZXN0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1kNTsiXSwibmFtZXMiOlsiY3J5cHRvIiwibWQ1IiwiYnl0ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJCdWZmZXIiLCJmcm9tIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/native.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/native.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    randomUUID: (crypto__WEBPACK_IMPORTED_MODULE_0___default().randomUUID)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFDNUIsaUVBQWU7SUFDYkMsWUFBWUQsMERBQWlCO0FBQy9CLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9uYXRpdmUuanM/YmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJhbmRvbVVVSUQ6IGNyeXB0by5yYW5kb21VVUlEXG59OyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyYW5kb21VVUlEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/native.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/nil.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/nil.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"00000000-0000-0000-0000-000000000000\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsd0NBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcz9iZDgzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/parse.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/parse.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction parse(uuid) {\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n    }\n    let v;\n    const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n    arr[1] = v >>> 16 & 0xff;\n    arr[2] = v >>> 8 & 0xff;\n    arr[3] = v & 0xff; // Parse ........-####-....-....-............\n    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n    arr[5] = v & 0xff; // Parse ........-....-####-....-............\n    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n    arr[7] = v & 0xff; // Parse ........-....-....-####-............\n    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n    arr[9] = v & 0xff; // Parse ........-....-....-....-############\n    // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n    arr[11] = v / 0x100000000 & 0xff;\n    arr[12] = v >>> 24 & 0xff;\n    arr[13] = v >>> 16 & 0xff;\n    arr[14] = v >>> 8 & 0xff;\n    arr[15] = v & 0xff;\n    return arr;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBRXJDLFNBQVNDLE1BQU1DLElBQUk7SUFDakIsSUFBSSxDQUFDRix3REFBUUEsQ0FBQ0UsT0FBTztRQUNuQixNQUFNQyxVQUFVO0lBQ2xCO0lBRUEsSUFBSUM7SUFDSixNQUFNQyxNQUFNLElBQUlDLFdBQVcsS0FBSyw2Q0FBNkM7SUFFN0VELEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQ0QsSUFBSUcsU0FBU0wsS0FBS00sS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFFLE1BQU87SUFDbERILEdBQUcsQ0FBQyxFQUFFLEdBQUdELE1BQU0sS0FBSztJQUNwQkMsR0FBRyxDQUFDLEVBQUUsR0FBR0QsTUFBTSxJQUFJO0lBQ25CQyxHQUFHLENBQUMsRUFBRSxHQUFHRCxJQUFJLE1BQU0sNkNBQTZDO0lBRWhFQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUNELElBQUlHLFNBQVNMLEtBQUtNLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRSxNQUFPO0lBQ25ESCxHQUFHLENBQUMsRUFBRSxHQUFHRCxJQUFJLE1BQU0sNkNBQTZDO0lBRWhFQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUNELElBQUlHLFNBQVNMLEtBQUtNLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRSxNQUFPO0lBQ3BESCxHQUFHLENBQUMsRUFBRSxHQUFHRCxJQUFJLE1BQU0sNkNBQTZDO0lBRWhFQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUNELElBQUlHLFNBQVNMLEtBQUtNLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRSxNQUFPO0lBQ3BESCxHQUFHLENBQUMsRUFBRSxHQUFHRCxJQUFJLE1BQU0sNkNBQTZDO0lBQ2hFLDBFQUEwRTtJQUUxRUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDRCxJQUFJRyxTQUFTTCxLQUFLTSxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUUsSUFBSyxnQkFBZ0I7SUFDbkVILEdBQUcsQ0FBQyxHQUFHLEdBQUdELElBQUksY0FBYztJQUM1QkMsR0FBRyxDQUFDLEdBQUcsR0FBR0QsTUFBTSxLQUFLO0lBQ3JCQyxHQUFHLENBQUMsR0FBRyxHQUFHRCxNQUFNLEtBQUs7SUFDckJDLEdBQUcsQ0FBQyxHQUFHLEdBQUdELE1BQU0sSUFBSTtJQUNwQkMsR0FBRyxDQUFDLEdBQUcsR0FBR0QsSUFBSTtJQUNkLE9BQU9DO0FBQ1Q7QUFFQSxpRUFBZUosS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9wYXJzZS5qcz8yYzRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIGxldCB2O1xuICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxNik7IC8vIFBhcnNlICMjIyMjIyMjLS4uLi4tLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFyclswXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgwLCA4KSwgMTYpKSA+Pj4gMjQ7XG4gIGFyclsxXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzJdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclszXSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoOSwgMTMpLCAxNikpID4+PiA4O1xuICBhcnJbNV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzZdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxOCksIDE2KSkgPj4+IDg7XG4gIGFycls3XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi5cblxuICBhcnJbOF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTksIDIzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzldID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjI1xuICAvLyAoVXNlIFwiL1wiIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpXG5cbiAgYXJyWzEwXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMV0gPSB2IC8gMHgxMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTJdID0gdiA+Pj4gMjQgJiAweGZmO1xuICBhcnJbMTNdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMTRdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclsxNV0gPSB2ICYgMHhmZjtcbiAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7Il0sIm5hbWVzIjpbInZhbGlkYXRlIiwicGFyc2UiLCJ1dWlkIiwiVHlwZUVycm9yIiwidiIsImFyciIsIlVpbnQ4QXJyYXkiLCJwYXJzZUludCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/regex.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/regex.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxSEFBcUgsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS9yZWdleC5qcz8xMTE3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/rng.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/rng.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFDNUIsTUFBTUMsWUFBWSxJQUFJQyxXQUFXLE1BQU0scUNBQXFDO0FBRTVFLElBQUlDLFVBQVVGLFVBQVVHLE1BQU07QUFDZixTQUFTQztJQUN0QixJQUFJRixVQUFVRixVQUFVRyxNQUFNLEdBQUcsSUFBSTtRQUNuQ0osNERBQXFCLENBQUNDO1FBQ3RCRSxVQUFVO0lBQ1o7SUFFQSxPQUFPRixVQUFVTSxLQUFLLENBQUNKLFNBQVNBLFdBQVc7QUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzPzM0NGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuY29uc3Qgcm5kczhQb29sID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsgLy8gIyBvZiByYW5kb20gdmFsdWVzIHRvIHByZS1hbGxvY2F0ZVxuXG5sZXQgcG9vbFB0ciA9IHJuZHM4UG9vbC5sZW5ndGg7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmIChwb29sUHRyID4gcm5kczhQb29sLmxlbmd0aCAtIDE2KSB7XG4gICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKHJuZHM4UG9vbCk7XG4gICAgcG9vbFB0ciA9IDA7XG4gIH1cblxuICByZXR1cm4gcm5kczhQb29sLnNsaWNlKHBvb2xQdHIsIHBvb2xQdHIgKz0gMTYpO1xufSJdLCJuYW1lcyI6WyJjcnlwdG8iLCJybmRzOFBvb2wiLCJVaW50OEFycmF5IiwicG9vbFB0ciIsImxlbmd0aCIsInJuZyIsInJhbmRvbUZpbGxTeW5jIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/sha1.js":
/*!********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/sha1.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction sha1(bytes) {\n    if (Array.isArray(bytes)) {\n        bytes = Buffer.from(bytes);\n    } else if (typeof bytes === \"string\") {\n        bytes = Buffer.from(bytes, \"utf8\");\n    }\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha1\").update(bytes).digest();\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBRTVCLFNBQVNDLEtBQUtDLEtBQUs7SUFDakIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixRQUFRO1FBQ3hCQSxRQUFRRyxPQUFPQyxJQUFJLENBQUNKO0lBQ3RCLE9BQU8sSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDcENBLFFBQVFHLE9BQU9DLElBQUksQ0FBQ0osT0FBTztJQUM3QjtJQUVBLE9BQU9GLHdEQUFpQixDQUFDLFFBQVFRLE1BQU0sQ0FBQ04sT0FBT08sTUFBTTtBQUN2RDtBQUVBLGlFQUFlUixJQUFJQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanM/NTU1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgYnl0ZXMgPSBCdWZmZXIuZnJvbShieXRlcyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMsICd1dGY4Jyk7XG4gIH1cblxuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaGExOyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJzaGExIiwiYnl0ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJCdWZmZXIiLCJmcm9tIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   unsafeStringify: () => (/* binding */ unsafeStringify)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */ const byteToHex = [];\nfor(let i = 0; i < 256; ++i){\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n    // Note: Be careful editing this code!  It's been tuned for performance\n    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n    // of the following:\n    // - One or more input array values don't map to a hex octet (leading to\n    // \"undefined\" in the uuid)\n    // - Invalid input values for the RFC `version` or `variant` fields\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Stringified UUID is invalid\");\n    }\n    return uuid;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3N0cmluZ2lmeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFDckM7OztDQUdDLEdBRUQsTUFBTUMsWUFBWSxFQUFFO0FBRXBCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUssRUFBRUEsRUFBRztJQUM1QkQsVUFBVUUsSUFBSSxDQUFDLENBQUNELElBQUksS0FBSSxFQUFHRSxRQUFRLENBQUMsSUFBSUMsS0FBSyxDQUFDO0FBQ2hEO0FBRU8sU0FBU0MsZ0JBQWdCQyxHQUFHLEVBQUVDLFNBQVMsQ0FBQztJQUM3Qyx1RUFBdUU7SUFDdkUsb0ZBQW9GO0lBQ3BGLE9BQU9QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxFQUFFLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUcsTUFBTVAsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsRUFBRSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLE1BQU1QLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDLEdBQUdQLFNBQVMsQ0FBQ00sR0FBRyxDQUFDQyxTQUFTLEdBQUcsQ0FBQyxHQUFHUCxTQUFTLENBQUNNLEdBQUcsQ0FBQ0MsU0FBUyxHQUFHLENBQUMsR0FBR1AsU0FBUyxDQUFDTSxHQUFHLENBQUNDLFNBQVMsR0FBRyxDQUFDO0FBQ3BmO0FBRUEsU0FBU0MsVUFBVUYsR0FBRyxFQUFFQyxTQUFTLENBQUM7SUFDaEMsTUFBTUUsT0FBT0osZ0JBQWdCQyxLQUFLQyxTQUFTLDRFQUE0RTtJQUN2SCxvQkFBb0I7SUFDcEIsd0VBQXdFO0lBQ3hFLDJCQUEyQjtJQUMzQixtRUFBbUU7SUFFbkUsSUFBSSxDQUFDUix3REFBUUEsQ0FBQ1UsT0FBTztRQUNuQixNQUFNQyxVQUFVO0lBQ2xCO0lBRUEsT0FBT0Q7QUFDVDtBQUVBLGlFQUFlRCxTQUFTQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3N0cmluZ2lmeS5qcz8xY2FjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc2xpY2UoMSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgcmV0dXJuIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gIGNvbnN0IHV1aWQgPSB1bnNhZmVTdHJpbmdpZnkoYXJyLCBvZmZzZXQpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzbGljZSIsInVuc2FmZVN0cmluZ2lmeSIsImFyciIsIm9mZnNldCIsInN0cmluZ2lmeSIsInV1aWQiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v1.js":
/*!******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v1.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\nlet _clockseq; // Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n    let i = buf && offset || 0;\n    const b = buf || new Array(16);\n    options = options || {};\n    let node = options.node || _nodeId;\n    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n    // specified.  We do this lazily to minimize issues related to insufficient\n    // system entropy.  See #189\n    if (node == null || clockseq == null) {\n        const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        if (node == null) {\n            // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n            node = _nodeId = [\n                seedBytes[0] | 0x01,\n                seedBytes[1],\n                seedBytes[2],\n                seedBytes[3],\n                seedBytes[4],\n                seedBytes[5]\n            ];\n        }\n        if (clockseq == null) {\n            // Per 4.2.2, randomize (14 bit) clockseq\n            clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n        }\n    } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq === undefined) {\n        clockseq = clockseq + 1 & 0x3fff;\n    } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n        nsecs = 0;\n    } // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n        throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n    }\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000; // `time_low`\n    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff; // `time_mid`\n    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff; // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n    b[i++] = clockseq & 0xff; // `node`\n    for(let n = 0; n < 6; ++n){\n        b[i + n] = node[n];\n    }\n    return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(b);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v3.js":
/*!******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v3.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"v3\", 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNBO0FBQzNCLE1BQU1FLEtBQUtGLG1EQUFHQSxDQUFDLE1BQU0sTUFBTUMsK0NBQUdBO0FBQzlCLGlFQUFlQyxFQUFFQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzP2M2NzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbmNvbnN0IHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiXSwibmFtZXMiOlsidjM1IiwibWQ1IiwidjMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v35.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v35.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* binding */ v35)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/parse.js\");\n\n\nfunction stringToBytes(str) {\n    str = unescape(encodeURIComponent(str)); // UTF8 escape\n    const bytes = [];\n    for(let i = 0; i < str.length; ++i){\n        bytes.push(str.charCodeAt(i));\n    }\n    return bytes;\n}\nconst DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\nconst URL = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\nfunction v35(name, version, hashfunc) {\n    function generateUUID(value, namespace, buf, offset) {\n        var _namespace;\n        if (typeof value === \"string\") {\n            value = stringToBytes(value);\n        }\n        if (typeof namespace === \"string\") {\n            namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n        }\n        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n            throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n        } // Compute hash of namespace and value, Per 4.3\n        // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n        // hashfunc([...namespace, ... value])`\n        let bytes = new Uint8Array(16 + value.length);\n        bytes.set(namespace);\n        bytes.set(value, namespace.length);\n        bytes = hashfunc(bytes);\n        bytes[6] = bytes[6] & 0x0f | version;\n        bytes[8] = bytes[8] & 0x3f | 0x80;\n        if (buf) {\n            offset = offset || 0;\n            for(let i = 0; i < 16; ++i){\n                buf[offset + i] = bytes[i];\n            }\n            return buf;\n        }\n        return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__.unsafeStringify)(bytes);\n    } // Function#name is not settable on some platforms (#270)\n    try {\n        generateUUID.name = name; // eslint-disable-next-line no-empty\n    } catch (err) {} // For CommonJS default export support\n    generateUUID.DNS = DNS;\n    generateUUID.URL = URL;\n    return generateUUID;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpRDtBQUNsQjtBQUUvQixTQUFTRSxjQUFjQyxHQUFHO0lBQ3hCQSxNQUFNQyxTQUFTQyxtQkFBbUJGLE9BQU8sY0FBYztJQUV2RCxNQUFNRyxRQUFRLEVBQUU7SUFFaEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLElBQUlLLE1BQU0sRUFBRSxFQUFFRCxFQUFHO1FBQ25DRCxNQUFNRyxJQUFJLENBQUNOLElBQUlPLFVBQVUsQ0FBQ0g7SUFDNUI7SUFFQSxPQUFPRDtBQUNUO0FBRU8sTUFBTUssTUFBTSx1Q0FBdUM7QUFDbkQsTUFBTUMsTUFBTSx1Q0FBdUM7QUFDM0MsU0FBU0MsSUFBSUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFFBQVE7SUFDakQsU0FBU0MsYUFBYUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLEdBQUcsRUFBRUMsTUFBTTtRQUNqRCxJQUFJQztRQUVKLElBQUksT0FBT0osVUFBVSxVQUFVO1lBQzdCQSxRQUFRaEIsY0FBY2dCO1FBQ3hCO1FBRUEsSUFBSSxPQUFPQyxjQUFjLFVBQVU7WUFDakNBLFlBQVlsQixxREFBS0EsQ0FBQ2tCO1FBQ3BCO1FBRUEsSUFBSSxDQUFDLENBQUNHLGFBQWFILFNBQVEsTUFBTyxRQUFRRyxlQUFlLEtBQUssSUFBSSxLQUFLLElBQUlBLFdBQVdkLE1BQU0sTUFBTSxJQUFJO1lBQ3BHLE1BQU1lLFVBQVU7UUFDbEIsRUFBRSwrQ0FBK0M7UUFDakQsMkVBQTJFO1FBQzNFLHVDQUF1QztRQUd2QyxJQUFJakIsUUFBUSxJQUFJa0IsV0FBVyxLQUFLTixNQUFNVixNQUFNO1FBQzVDRixNQUFNbUIsR0FBRyxDQUFDTjtRQUNWYixNQUFNbUIsR0FBRyxDQUFDUCxPQUFPQyxVQUFVWCxNQUFNO1FBQ2pDRixRQUFRVSxTQUFTVjtRQUNqQkEsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUUsR0FBRyxPQUFPUztRQUM3QlQsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUUsR0FBRyxPQUFPO1FBRTdCLElBQUljLEtBQUs7WUFDUEMsU0FBU0EsVUFBVTtZQUVuQixJQUFLLElBQUlkLElBQUksR0FBR0EsSUFBSSxJQUFJLEVBQUVBLEVBQUc7Z0JBQzNCYSxHQUFHLENBQUNDLFNBQVNkLEVBQUUsR0FBR0QsS0FBSyxDQUFDQyxFQUFFO1lBQzVCO1lBRUEsT0FBT2E7UUFDVDtRQUVBLE9BQU9wQiw4REFBZUEsQ0FBQ007SUFDekIsRUFBRSx5REFBeUQ7SUFHM0QsSUFBSTtRQUNGVyxhQUFhSCxJQUFJLEdBQUdBLE1BQU0sb0NBQW9DO0lBQ2hFLEVBQUUsT0FBT1ksS0FBSyxDQUFDLEVBQUUsc0NBQXNDO0lBR3ZEVCxhQUFhTixHQUFHLEdBQUdBO0lBQ25CTSxhQUFhTCxHQUFHLEdBQUdBO0lBQ25CLE9BQU9LO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzPzk3MGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdW5zYWZlU3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2MzUobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIF9uYW1lc3BhY2U7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBzdHJpbmdUb0J5dGVzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHBhcnNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgaWYgKCgoX25hbWVzcGFjZSA9IG5hbWVzcGFjZSkgPT09IG51bGwgfHwgX25hbWVzcGFjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25hbWVzcGFjZS5sZW5ndGgpICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iXSwibmFtZXMiOlsidW5zYWZlU3RyaW5naWZ5IiwicGFyc2UiLCJzdHJpbmdUb0J5dGVzIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJieXRlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2hhckNvZGVBdCIsIkROUyIsIlVSTCIsInYzNSIsIm5hbWUiLCJ2ZXJzaW9uIiwiaGFzaGZ1bmMiLCJnZW5lcmF0ZVVVSUQiLCJ2YWx1ZSIsIm5hbWVzcGFjZSIsImJ1ZiIsIm9mZnNldCIsIl9uYW1lc3BhY2UiLCJUeXBlRXJyb3IiLCJVaW50OEFycmF5Iiwic2V0IiwiZXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v4.js":
/*!******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v4.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./native.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/native.js\");\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n    if (_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID && !buf && !options) {\n        return _native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = rnds[6] & 0x0f | 0x40;\n    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n    if (buf) {\n        offset = offset || 0;\n        for(let i = 0; i < 16; ++i){\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_2__.unsafeStringify)(rnds);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUM7QUFDTjtBQUNzQjtBQUVqRCxTQUFTRyxHQUFHQyxPQUFPLEVBQUVDLEdBQUcsRUFBRUMsTUFBTTtJQUM5QixJQUFJTiw2REFBaUIsSUFBSSxDQUFDSyxPQUFPLENBQUNELFNBQVM7UUFDekMsT0FBT0osNkRBQWlCO0lBQzFCO0lBRUFJLFVBQVVBLFdBQVcsQ0FBQztJQUN0QixNQUFNSSxPQUFPSixRQUFRSyxNQUFNLElBQUksQ0FBQ0wsUUFBUUgsR0FBRyxJQUFJQSwrQ0FBRSxLQUFNLGdFQUFnRTtJQUV2SE8sSUFBSSxDQUFDLEVBQUUsR0FBR0EsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPO0lBQzNCQSxJQUFJLENBQUMsRUFBRSxHQUFHQSxJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sTUFBTSxvQ0FBb0M7SUFFckUsSUFBSUgsS0FBSztRQUNQQyxTQUFTQSxVQUFVO1FBRW5CLElBQUssSUFBSUksSUFBSSxHQUFHQSxJQUFJLElBQUksRUFBRUEsRUFBRztZQUMzQkwsR0FBRyxDQUFDQyxTQUFTSSxFQUFFLEdBQUdGLElBQUksQ0FBQ0UsRUFBRTtRQUMzQjtRQUVBLE9BQU9MO0lBQ1Q7SUFFQSxPQUFPSCw4REFBZUEsQ0FBQ007QUFDekI7QUFFQSxpRUFBZUwsRUFBRUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1jb3N0aW5nLXRvb2wvLi9ub2RlX21vZHVsZXMvZ29vZ2xlYXBpcy1jb21tb24vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92NC5qcz8xOTcxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5hdGl2ZS5yYW5kb21VVUlEKCk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3Qgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiB1bnNhZmVTdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyJdLCJuYW1lcyI6WyJuYXRpdmUiLCJybmciLCJ1bnNhZmVTdHJpbmdpZnkiLCJ2NCIsIm9wdGlvbnMiLCJidWYiLCJvZmZzZXQiLCJyYW5kb21VVUlEIiwicm5kcyIsInJhbmRvbSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v5.js":
/*!******************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v5.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"v5\", 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNFO0FBQzdCLE1BQU1FLEtBQUtGLG1EQUFHQSxDQUFDLE1BQU0sTUFBTUMsZ0RBQUlBO0FBQy9CLGlFQUFlQyxFQUFFQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9iLWNvc3RpbmctdG9vbC8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzP2M3ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xuY29uc3QgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiXSwibmFtZXMiOlsidjM1Iiwic2hhMSIsInY1Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js":
/*!************************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/regex.js\");\n\nfunction validate(uuid) {\n    return typeof uuid === \"string\" && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCO0FBRS9CLFNBQVNDLFNBQVNDLElBQUk7SUFDcEIsT0FBTyxPQUFPQSxTQUFTLFlBQVlGLHNEQUFVLENBQUNFO0FBQ2hEO0FBRUEsaUVBQWVELFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanM/NzQyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiXSwibmFtZXMiOlsiUkVHRVgiLCJ2YWxpZGF0ZSIsInV1aWQiLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/version.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/version.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/validate.js\");\n\nfunction version(uuid) {\n    if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n        throw TypeError(\"Invalid UUID\");\n    }\n    return parseInt(uuid.slice(14, 15), 16);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29nbGVhcGlzLWNvbW1vbi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFFckMsU0FBU0MsUUFBUUMsSUFBSTtJQUNuQixJQUFJLENBQUNGLHdEQUFRQSxDQUFDRSxPQUFPO1FBQ25CLE1BQU1DLFVBQVU7SUFDbEI7SUFFQSxPQUFPQyxTQUFTRixLQUFLRyxLQUFLLENBQUMsSUFBSSxLQUFLO0FBQ3RDO0FBRUEsaUVBQWVKLE9BQU9BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItY29zdGluZy10b29sLy4vbm9kZV9tb2R1bGVzL2dvb2dsZWFwaXMtY29tbW9uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmVyc2lvbi5qcz81MTZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE1KSwgMTYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2ZXJzaW9uOyJdLCJuYW1lcyI6WyJ2YWxpZGF0ZSIsInZlcnNpb24iLCJ1dWlkIiwiVHlwZUVycm9yIiwicGFyc2VJbnQiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/googleapis-common/node_modules/uuid/dist/esm-node/version.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/googleapis-common/package.json":
/*!*****************************************************!*\
  !*** ./node_modules/googleapis-common/package.json ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"googleapis-common","version":"7.2.0","description":"A common tooling library used by the googleapis npm module. You probably don\'t want to use this directly.","repository":"googleapis/nodejs-googleapis-common","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","!build/src/**/*.map"],"scripts":{"prebenchmark":"npm run compile","benchmark":"node build/benchmark/bench.js","compile":"tsc -p .","test":"c8 mocha build/test","system-test":"c8 mocha build/system-test --timeout 600000","presystem-test":"npm run compile","fix":"gts fix","prepare":"npm run compile","pretest":"npm run compile","lint":"gts check","samples-test":"mocha build/samples-test","docs":"compodoc src/","docs-test":"linkinator docs","webpack":"webpack","browser-test":"karma start","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","clean":"gts clean","precompile":"gts clean"},"keywords":[],"author":"Google LLC","license":"Apache-2.0","dependencies":{"extend":"^3.0.2","gaxios":"^6.0.3","google-auth-library":"^9.7.0","qs":"^6.7.0","url-template":"^2.0.8","uuid":"^9.0.0"},"devDependencies":{"@babel/plugin-proposal-private-methods":"^7.18.6","@compodoc/compodoc":"1.1.23","@types/execa":"^0.9.0","@types/extend":"^3.0.1","@types/mocha":"^9.0.0","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/nock":"^11.0.0","@types/proxyquire":"^1.3.28","@types/qs":"^6.5.3","@types/sinon":"^17.0.0","@types/tmp":"0.2.6","@types/url-template":"^2.0.28","@types/uuid":"^9.0.0","c8":"^8.0.0","codecov":"^3.5.0","execa":"^5.0.0","gts":"^5.0.0","http2spy":"^2.0.0","is-docker":"^2.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-remap-coverage":"^0.1.5","karma-sourcemap-loader":"^0.4.0","karma-webpack":"^4.0.0","linkinator":"^3.1.0","mocha":"^9.2.2","mv":"^2.1.1","ncp":"^2.0.0","nock":"^13.0.0","null-loader":"^4.0.0","proxyquire":"^2.1.3","puppeteer":"^18.2.1","sinon":"^17.0.0","tmp":"^0.2.0","ts-loader":"^8.0.0","typescript":"5.1.6","webpack":"^4.0.0","webpack-cli":"^4.0.0"},"engines":{"node":">=14.0.0"}}');

/***/ })

};
;